#+TITLE: Journal on Emacs and Emacs Lisp

* 分别用 let/pcase-let/seq-let/-let 实现同样的需求
Entered on [2017-12-24 Sun 14:08]

#+begin_src emacs-lisp
(let* ((l (benchmark-run (sleep-for .2)))
       (total (nth 0 l))
       (gc (nth 1 l))
       (gc-total (nth 2 l)))
  (list total gc gc-total))
#+end_src

#+RESULTS:
| 0.20749 | 0 | 0.0 |

#+begin_src emacs-lisp
(pcase-let ((`(,total ,gc ,gc-total)
             (benchmark-run (sleep-for .2))))
  (list total gc gc-total))
#+end_src

#+RESULTS:
| 0.20612 | 0 | 0.0 |

#+begin_src emacs-lisp
(seq-let (total gc gc-total) (benchmark-run (sleep-for .2))
  (list total gc gc-total))
#+end_src

#+RESULTS:
| 0.203467 | 0 | 0.0 |

#+begin_src emacs-lisp
(-let (((total gc gc-total)
        (benchmark-run (sleep-for .2))))
  (list total gc gc-total))
#+end_src

#+RESULTS:
| 0.205723 | 0 | 0.0 |

* 一个简单的 [[info:elisp#Generic%20Functions][Generic Functions]] 例子
Entered on [2017-12-25 Mon 11:43]

根据参数的类型自动选择不同的方法。

#+begin_src emacs-lisp
(cl-defgeneric foo-size (x)
  "Return the size of x.")

(cl-defmethod foo-size ((s string))
  "Return the size of the string S."
  (length s))

(cl-defmethod foo-size ((b buffer))
  "Return the size of the buffer B."
  (buffer-size b))
#+end_src

#+RESULTS:
: foo-size

#+begin_src emacs-lisp
(foo-size "hello")
#+end_src

#+RESULTS:
: 5

#+begin_src emacs-lisp
(with-temp-buffer
  (insert "hello")
  (foo-size (current-buffer)))
#+end_src

#+RESULTS:
: 5
* Use =M-x ediff-regions-wordwise= to diff sexps (list)
Entered on [2017-12-27 Wed 14:52]

#+begin_example
(bar baz qux quux corge grault garply waldo fred plugh)
(bar baz qux quux corge thud grault garply waldo fred xyzzy plugh)
#+end_example

and ignore white spaces can be userful

#+begin_src emacs-lisp
(setq ediff-diff-options "-w")
#+end_src

[[https://emacs.stackexchange.com/questions/22313/sexp-diff-like-mode-for-elisp-source-diffing][Sexp-diff like mode for elisp source diffing - Emacs Stack Exchange]]
