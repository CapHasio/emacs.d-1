#+TITLE: Emacs Solutions to [[http://www.vimgolf.com/][VimGolf]]
#+OPTIONS: toc:nil

#+NAME: progress
#+CAPTION: Tracking the progress
| Total | Done |   (%) |
|-------+------+-------|
|   345 |   53 | 15.36 |
#+TBLFM: $2='(count-matches "^* ")::$3=($2/$1)*100;p4

#+TOC: headlines 1

* [[https://vimgolf.com/challenges/510b1c61e48b7e0002000028][Chinese Multiplication Table]]
<2017-01-29 Sun>

#+BEGIN_SRC emacs-lisp :exports both
(loop for i from 1 to 9
      concat (concat
              (mapconcat #'identity
                         (loop for j from 1 to i
                               collect (format "%d*%d=%d" i j (* i j)))
                         " ")
              "\n"))
#+END_SRC

#+RESULTS:
: 1*1=1
: 2*1=2 2*2=4
: 3*1=3 3*2=6 3*3=9
: 4*1=4 4*2=8 4*3=12 4*4=16
: 5*1=5 5*2=10 5*3=15 5*4=20 5*5=25
: 6*1=6 6*2=12 6*3=18 6*4=24 6*5=30 6*6=36
: 7*1=7 7*2=14 7*3=21 7*4=28 7*5=35 7*6=42 7*7=49
: 8*1=8 8*2=16 8*3=24 8*4=32 8*5=40 8*6=48 8*7=56 8*8=64
: 9*1=9 9*2=18 9*3=27 9*4=36 9*5=45 9*6=54 9*7=63 9*8=72 9*9=81

注意上面有两处没有对齐。

* [[https://vimgolf.com/challenges/56fb2e75ccffcc0009026473][One number per line]]
<2017-01-29 Sun>

1. ~M-x replace-string RET , RET C-q C-j RET~
2. ~M-x delete-matching-lines RET ^$ RET~

* [[https://vimgolf.com/challenges/52c3cb0d9b8634000200000e][A HAPPY NEW YEAR 2014 !]]
<2017-01-29 Sun>

If necessary, use ~M-x org-increase-number-at-point~ or similar to
increase/decrease number at point.

* [[https://vimgolf.com/challenges/54862fbb3f90ac0002904cf5][Just the middle]]
<2017-01-29 Sun>

Just edit like in any normal text editor. Or mark the region of text
which is useful and run the following command.

#+BEGIN_SRC emacs-lisp
(defun delete-whole-buffer-but-region (beg end)
  (interactive "*r")
  (delete-region end (point-max))
  (delete-region (point-min) beg))
#+END_SRC

* [[https://vimgolf.com/challenges/5462e3f41198b80002512673][I forgot quotes]]
<2017-01-29 Sun>

1. Enable ~electric-pair-mode~
2. Mark the region of text which needs quotes and enter one ~"~

* [[http://www.vimgolf.com/challenges/55bcdc3ef4219f456102374f][Vice versa]]
<2017-01-29 Sun>

> Little role switching.

#+BEGIN_SRC diff
- The quick brown fox jumps over the lazy dog.
+ The quick lazy dog jumps over the brown fox.
#+END_SRC

** Solution

Hmm, I have made a package (swap-regions) for this.

1. Select "brown fox" and cancel it with ~C-g~
2. Select "lazy dog"
3. ~M-x swap-regions~

* [[http://www.vimgolf.com/challenges/5192f96ad8df110002000002][Words in parens]]
<2017-01-29 Sun>

Start file:

#+BEGIN_EXAMPLE
one two
three
#+END_EXAMPLE

End file:

#+BEGIN_EXAMPLE
(one) (two)
(three)
#+END_EXAMPLE

** Solution

*** Solution 1 with ~electric-pair-mode~

Enable it if necessary

1. Mark the word
2. Hit ~(~

*** Solution 2 with ~paredit-mode~

Enable it if necessary

1. Move point to the word and hit ~M-(~

By the way, 1) mark the word 2) hit ~(~. works too.

* [[http://www.vimgolf.com/challenges/56d70389bbbe462aff01d42a][Swap values]]
<2017-01-29 Sun>

#+BEGIN_SRC diff
- name=www-data, groups=developer
+ name=developer, groups=www-data
#+END_SRC

Use ~swap-regions~.

* [[http://www.vimgolf.com/challenges/53d93fc3768e280002124f23][V to the i]]
<2017-01-29 Sun>

#+BEGIN_QUOTE
Input is 99 V's. Output is 100 i's.
#+END_QUOTE

#+BEGIN_SRC diff
- VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
+ iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii
#+END_SRC

** Solution

1. ~C-k~
2. ~C-u 100 i~ (or simply type ~M-1 0 0 i~)

* [[http://www.vimgolf.com/challenges/540629666a1e4000020d9e5a][-a-b-c-]]
<2017-01-29 Sun>

#+BEGIN_SRC diff
- abcdefghijklm
+ -a-b-c-d-e-f-g-h-i-j-k-l-m-
#+END_SRC

** Solution

#+BEGIN_SRC emacs-lisp
(defun put-hyphens-everywhere (beg end)
  (interactive "*r")
  (insert
   (concat "-"
           (mapconcat #'string
                      (string-to-list (delete-and-extract-region beg end))
                      "-")
           "-")))
#+END_SRC

* [[http://www.vimgolf.com/challenges/4f0720c8f037090001000007][switch variable]]
<2017-01-29 Sun>

#+BEGIN_SRC diff
- int barins, foovariable = 1;
+ int foovariable, barins = 1;
#+END_SRC

** Solution

~M-t~ (~transpose-words~) should just work for this case, thougth it
is better to use ~C-M-t~ (~transpose-sexps~).

* [[https://vimgolf.com/challenges/57343555fd77ad227900df4a][Split line with dots]]
<2017-01-29 Sun>

Start file

#+BEGIN_SRC ruby
class VimGolf
  def split_me
    MyModel .first_method.second_method(arg).third_method(arg.method_one.method_two)
  end
end
#+END_SRC

End file

#+BEGIN_SRC ruby
class VimGolf
  def split_me
    MyModel
      .first_method
      .second_method(arg)
      .third_method(arg.method_one.method_two)
  end
end
#+END_SRC

** Solution

~electric-indent-mode~ defaults to ~t~, thus simply ~RET~ will indent
code automatically. So the solution is moving point to ~.~ and type
~RET~.

Just in case, I would have to repeat it a lot: define the following
keyboard macro with ~<f3>~ and ~<f4>~ or ~C-x (~ and ~C-x )~.

#+BEGIN_EXAMPLE
C-s . C-b RET C-f
#+END_EXAMPLE

Run the last keyboard macro with ~C-x e~
(~kmacro-end-and-call-macro~).

* [[https://vimgolf.com/challenges/583112d0215b7c3ed2016bdb][Order and join]]
<2017-01-29 Sun>

Start file

#+BEGIN_EXAMPLE
four
one
two
five
three
six
#+END_EXAMPLE

End file

#+BEGIN_EXAMPLE
one two three
four five
six
#+END_EXAMPLE

** Solution

Type ~M-^~ (~delete-indentation~ or its alias ~join-line~) for several
times and in several places.

* [[https://vimgolf.com/challenges/559c30948ef59c0eb7000002][Collect List]]
<2017-01-29 Sun>

Start file

#+BEGIN_EXAMPLE
  * item1
  * item2
  * item3
  * item4
  * item5
#+END_EXAMPLE

End file

#+BEGIN_EXAMPLE
item1,item2,item3,item4,item5
#+END_EXAMPLE

** Solution

1. Remove the prefix "* "
   1. Mark the rectangle region with ~C-x SPC~
   2. Delete it with ~C-w~
2. Join the line with "," by ~M-% C-q C-j RET , RET~ (~query-replace~)

* [[https://vimgolf.com/challenges/576c778ea4896a561b01b4f2][Copy three lines]]
<2017-01-29 Sun>

1. Mark the text and copy it with ~M-w~
2. Yank the text with ~M-y~ (~helm-show-kill-ring~) and delete unneeded
   text with ~C-k~
3. Repeat step 2

* [[https://vimgolf.com/challenges/54595b13128576000257a3c1][Basic renumbering]]
<2017-01-29 Sun>

Start file

#+BEGIN_EXAMPLE
10 PRINT "The actual"
15 PRINT "code doesn't"
16 PRINT "really matter."
20 PRINT "Just take"
25 PRINT "care of"
30 PRINT "the numbers."
#+END_EXAMPLE

End file

#+BEGIN_EXAMPLE
10 PRINT "The actual"
20 PRINT "code doesn't"
30 PRINT "really matter."
40 PRINT "Just take"
50 PRINT "care of"
60 PRINT "the numbers."
#+END_EXAMPLE

** Solution

- Remove old prefix with ~C-x SPC~ (~rectangle-mark-mode~) and ~C-w~
- Insert new prefix with the following command (Notes that ~C-x r N~
  (~rectangle-number-lines~)'s step always is 1 thus doesn't work
  here)

#+BEGIN_SRC emacs-lisp
(defun number-region (start end start-at step)
  (interactive "*r\nnNumber to count from: \nnStep: ")
  (apply-on-rectangle (lambda (start end _arg)
                        (move-to-column start t)
                        (insert (format "%d " start-at))
                        (incf start-at step))
                      start end nil))
#+END_SRC

* [[https://vimgolf.com/challenges/51f4a64c6813e30002000018][quotes inside quotes]]
<2017-01-30 Mon>

Start file

#+BEGIN_EXAMPLE
This string contains a 'quoted' word.
This string contains 'two' quoted 'words.'
This 'string doesn't make things easy.'
#+END_EXAMPLE

End file

#+BEGIN_EXAMPLE
This string contains a "quoted" word.
This string contains "two" quoted "words."
This "string doesn't make things easy."
#+END_EXAMPLE

** Solution

1. Mark the text (including quotes)
2. Call the following command

#+BEGIN_SRC emacs-lisp
(defun toggle-single-and-double-quote (beg end)
  (interactive "*r")
  (let ((s (buffer-substring beg end))
        double-p)
    (if (and (> (length s) 2)
             (let ((left (aref s 0))
                   (right (aref s (1- (length s)))))
               (or (= left right ?')
                   (prog1 (= left right ?\")
                     (setq double-p t)))))
        (progn (delete-region beg end)
               (insert (if double-p ?' ?\")
                       (substring s 1 -1)
                       (if double-p ?' ?\")))
      (message "You need mark a region of \"'foo'\" before calling this"))))
#+END_SRC

The following can help editing pairs or quotes under some particular
situations nicely.

- ~electric-pair-mode~ (built-in)
- ParEdit (ELPA)
- cycle-quotes (ELPA)

* [[https://vimgolf.com/challenges/571808767dd9d30009000001][Align commas]]
<2017-01-30 Mon>

Start file

#+BEGIN_EXAMPLE
just = make,
       all,
       the,
       commas,
       line,
       up
#+END_EXAMPLE

End file

#+BEGIN_EXAMPLE
just = make  ,
       all   ,
       the   ,
       commas,
       line  ,
       up
#+END_EXAMPLE

** Solution

~M-x align-regexp RET , RET~ works out of box. Though, I still don't
know how this works. I will need to figure this out once facing more
complex task.

* [[https://vimgolf.com/challenges/4d1a1c36567bac34a9000002][Reformat/Refactor a Golfer Class]]
<2017-01-30 Mon>

Just edit normally.

* [[https://vimgolf.com/challenges/4d1a8bf2b8cb3409320002c4][Search and Replace 0]]
<2017-01-30 Mon>

~M-% aaa RET xaaax RET~

* [[https://vimgolf.com/challenges/53c66c482b4166000226bbee][Don't know what this is]]
<2017-01-30 Mon>

Start file

#+BEGIN_EXAMPLE
[1:0]
[0:1]
[1:100]
[0:100]
#+END_EXAMPLE

End file

#+BEGIN_EXAMPLE
[   ]
[   ]
[     ]
[     ]
#+END_EXAMPLE

** Solution

Use ~C-M-%~ (~query-replace-regexp~) then replace

- ~\[\(.\)\]~ with
- ~\,(format "[%s]" (make-string (length \1) ? ))~

For the use of ~\,~, see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Regexp-Replace.html][(info "(emacs) Regexp Replace")]].

* [[http://www.vimgolf.com/challenges/56ef78d9f604b51ec4007b8d][Scrambled numbers]]
<2017-01-30 Mon>

Start file

#+BEGIN_EXAMPLE
Four is 1.
One is 2.
Five is 3.
Three is 4.
Six is 5.
Two is 6.
#+END_EXAMPLE

End file

#+BEGIN_EXAMPLE
One is 1.
Two is 2.
Three is 3.
Four is 4.
Five is 5.
Six is 6.
#+END_EXAMPLE

** Solution

- Enable ~swap-word-mode~ then
- swap word up/down with ~<M-down>~ and ~<M-up>~

#+BEGIN_SRC emacs-lisp
(defun swap-word-up->down ()
  (interactive)
  (let ((b1 (bounds-of-thing-at-point 'word))
        s1 e1 t1
        s2 e2 t2)
    (when b1
      (setq s1 (car b1)
            e1 (cdr b1)
            t1 (buffer-substring s1 e1))
      (save-excursion
        (forward-line 1)
        (setq b2 (bounds-of-thing-at-point 'word)
              s2 (car b2)
              e2 (cdr b2)
              t2 (buffer-substring s2 e2))
        (delete-region s2 e2)
        (insert t1))
      (delete-region s1 e1)
      (insert t2))))

(defun swap-word-down->up ()
  (interactive)
  (let ((b1 (bounds-of-thing-at-point 'word))
        s1 e1 t1
        b2 s2 e2 t2)
    (when b1
      (save-excursion
        (forward-line -1)
        (setq b2 (bounds-of-thing-at-point 'word))
        (when b2
          (setq s1 (car b1)
                e1 (cdr b1)
                t1 (buffer-substring s1 e1)
                s2 (car b2)
                e2 (cdr b2)
                t2 (buffer-substring s2 e2))))
      (delete-region s1 e1)
      (insert t2)
      (forward-line -1)
      (delete-region s2 e2)
      (insert t1))))

(define-minor-mode swap-word-mode
  "Swap word up/down."
  :init nil
  :lighter " Swap word"
  :keymap (let ((map (make-sparse-keymap)))
            (define-key map (kbd "<M-up>")  #'swap-word-down->up)
            (define-key map (kbd "<M-down>") #'swap-word-up->down)
            map))
#+END_SRC

* [[http://www.vimgolf.com/challenges/54df95a4a4b28331e9000003][Space out the alphabet]]
<2017-01-30 Mon>

1. ~M-x replace-regexp RET \(.\) RET    \1 RET~
2. Delete leading white spaces with rectangle mark mode.

By the way, I don't know how a regexp which matches any character but
not at the beginning of a line.

* [[http://www.vimgolf.com/challenges/4f438739f5a8d70001000019][replacing each line of a block selection]]
<2017-01-30 Mon>

Replace (or query-replace) string (or regexp) as usual.

* [[http://www.vimgolf.com/challenges/4ef209ef78702b0001000019][Make it more readable]]
<2017-01-30 Mon>

- Replace ~#~ with ~\n\n#~ with ~M-x replace-string~
- Delete leading empty lines with the most obvious way (that is,
  delete multiple times or mark then delete)

* [[http://www.vimgolf.com/challenges/539c50b188b4e20002053e38][Where should I put the Newline?]]
<2017-01-30 Mon>

Replace (or query-replace) ~--->newline<---~ with ~--->\n<---~. Notes,
to enter ~\n~ from MiniBuffer, type ~C-q C-j~ (~C-q~ is bound to
~quoted-insert~).

* [[http://www.vimgolf.com/challenges/4d716c76919202611400002b][Numbering a List]]
<2017-01-30 Mon>

1. Mark the region
2. ~C-u C-x r N RET %1d. RET~ (i.e., call ~rectangle-number-lines~
   with a prefix argument, and use the default start (that is 1), and
   enter the format)

* [[http://www.vimgolf.com/challenges/54345d14d529ef0002227d4c][That hyphen]]
<2017-01-30 Mon>

Just normal edit.

* [[http://www.vimgolf.com/challenges/58409414770f4b474601384c][Sort files from hosts]]
<2017-01-31 Tue>

Start file

#+BEGIN_EXAMPLE
dartacan: /etc/hosts
dartacan: /etc/httpd/conf/httpd.conf
dartacan: /opt/scripts/list_vhosts
mozart: /etc/resolv.conf
mozart: /usr/bin/vim
mozart: /usr/bin/awesome
mozart: ~/.gem/ruby/2.1.0/bin/vimgolf
gullit: /bin/bash
gullit: /etc/hosts
gullit: /usr/bin/xorg
gullit: /usr/bin/xeyes
gullit: /usr/bin/X
gullit: /
#+END_EXAMPLE

End file

#+BEGIN_EXAMPLE
dartacan: /etc/hosts /etc/httpd/conf/httpd.conf /opt/scripts/list_vhosts
mozart: /etc/resolv.conf /usr/bin/vim /usr/bin/awesome ~/.gem/ruby/2.1.0/bin/vimgolf
gullit: /bin/bash /etc/hosts /usr/bin/xorg /usr/bin/xeyes /usr/bin/X /
#+END_EXAMPLE

** Solution

1. Define the following keyboard macro with ~C-x (~ and ~C-x )~
2. Execute it with ~C-x e~ by moving point accordingly or ~M-x
   apply-macro-to-region-lines~ by select the region.

#+BEGIN_EXAMPLE
Last macro: C-a C-SPC C-s : C-f C-w M-^
#+END_EXAMPLE

* [[http://www.vimgolf.com/challenges/57a208ce38e7e83a43000003][Generate a list of numbers]]
<2017-01-31 Tue>

#+BEGIN_QUOTE
Please generate list of numbers from 1 to 20.
#+END_QUOTE

** Solution

#+BEGIN_SRC emacs-lisp
(loop for i from 1 to 20
      do (insert (format "%s " i)))
#+END_SRC

* [[http://www.vimgolf.com/challenges/536cfa23fcccd100025678bd][Extract argument from function]]
<2017-01-31 Tue>

Nothing special, edit as usual.

* [[http://www.vimgolf.com/challenges/4d1a4d82a860b7447200008d][Whitespace, empty lines and tabs]]
<2017-01-31 Tue>

1. Replace one tab with one space with query-replace or just replace
2. Strip trailing whitespace with ~M-x delete-trailing-whitespace~
3. Delete empty lines with ~M-x delete-matching-lines ^$~

In Emacs, ~untabify~ and ~whitespace-cleanup~ are much more sophisticated.

* [[http://www.vimgolf.com/challenges/5100ce70326e09000200004a][Saving the hashes(#)]]
<2017-01-31 Tue>

#+BEGIN_QUOTE
Our goal is to delete every line which doesn't contain a hash
signs. The remaining hash signs with numbers are then sorted to get
the final output.
#+END_QUOTE

** Solution

1. Delete line which don't contain a hash with ~M-x delete-non-matching-lines #~
2. Make all # on its own line with replace " #" with "\n#"
3. Reverse the lines (since it's sorted already) with ~M-x reverse-region~

* [[http://www.vimgolf.com/challenges/5421e49fdbded100021e4934][Count both ways]]
<2017-01-31 Tue>

1. Copy "two three four five six seven eight nine ten eleven" and
   paste it to next line
2. Mark the second line and replace " " with "\n" with ~M-x
   replace-string~.

* [[http://www.vimgolf.com/challenges/5526aef5814f89118e00f23c][camel riding]]
<2017-01-31 Tue>

#+BEGIN_SRC diff
-val (schemas, activeCount, techTagCount, sharedCount, allowedPathsCount, rootCount, searchableCount) = fieldStats(store)
+val (schemas, schActiveCount, schTechTagCount, schSharedCount, schAllowedPathsCount, schRootCount, schSearchableCount) = fieldStats(store)
#+END_SRC

Define a keyboard macro of simple edit plus ~M-x upcase-initials-region~.

* [[http://www.vimgolf.com/challenges/53b473a3ac0ceb00022303bd][Do you demand a shrubbery?]]
<2017-01-31 Tue>

Normal edit.

* [[http://www.vimgolf.com/challenges/57a87f444f1a8e3c4000ff8c][Pretty multi-line bash]]
<2017-01-31 Tue>

~M-x align-regexp RET && RET~

* [[http://www.vimgolf.com/challenges/54698da795f6da00020d85ed][Condensed Cases]]
<2017-01-31 Tue>

# \nbsp stands for one space, see (info "(org) Special symbols") for
# more info
1. Set "\nbsp\nbsp\nbsp\nbsp{}case" as ~fill-prefix~ by moving point right after it and
   hitting ~C-.~ (or ~M-x set-fill-prefix~).
2. Join the line with previous one with ~M-^~ (or ~M-x
   delete-indentation~)
3. Replace " " with " ," by using query-replace on a region.

* [[http://www.vimgolf.com/challenges/5325695c6092800002072d06][Mess in revision history]]
<2017-01-31 Tue>

Use ~C-x SPC~ (~rectangle-mark-mode~) to mark the region and ~C-x r t~
(~string-rectangle~) to insert the leading spaces.

* [[http://www.vimgolf.com/challenges/5054baaafa0b390002000029][SFD-ROC: vimvimvim]]
<2017-01-31 Tue>

Replace "vim" with "vim\n" by typing ~M-x replace-string RET vim RET
vim C-q C-j RET~.

* [[http://www.vimgolf.com/challenges/56680033ac11043d6306aa07][Replace and keep the case]]
<2017-01-31 Tue>

Emacs by default does this, simply run ~M-%~ (~query-replace~) or just
~M-x replace-string~.

* [[http://www.vimgolf.com/challenges/580c21b5c177c54b0d067069][Start coding format]]
<2017-01-31 Tue>

Type it literally. CC Mode is powerful.

* [[http://www.vimgolf.com/challenges/51e023f92b2f6d0002000066][Hole-in-one]]
<2017-01-31 Tue>

Edit as usual.

* [[http://www.vimgolf.com/challenges/4d1e634e509d6e19d8000081][Shebangs for all]]
<2017-01-31 Tue>

Edit as usual.

* [[http://www.vimgolf.com/challenges/5447b459380e8b0002000db3][Gray area]]
<2017-01-31 Tue>

Edit as usual.

- Copy a region with ~M-w~ (~kill-ring-save~)
- Clear a region with ~C-x r c~ (~clear-rectangle~)
- Delete a region with ~C-w~ (~kill-region~)

* [[http://www.vimgolf.com/challenges/53369b712a09c1000223fb57][Two become one]]
<2017-01-31 Tue>

Edit as usual, nothing special.

* [[https://vimgolf.com/challenges/4ed3d247a745c1000100002a][remove dupes from array]]
<2017-01-31 Tue>

Start file

#+BEGIN_EXAMPLE
[11, 2, 3,5  , 1,1, 22, 4]
#+END_EXAMPLE

End file

#+BEGIN_EXAMPLE
[1, 2, 3, 4, 5, 11, 22]
#+END_EXAMPLE

** Solution

Mark the numbers in the region and run the following command.

#+BEGIN_SRC emacs-lisp
(defun sort-and-remove-dup-in-region (start end)
  (interactive "*r")
  (let* ((str (buffer-substring start end))
         (replace
          (mapconcat #'number-to-string
                     (sort (mapcar #'string-to-number
                                   (delete-dups (split-string str "[ ]*,[ ]*")))
                           #'<)
                     ", ")))
    (delete-region start end)
    (insert replace)))
#+END_SRC

* [[https://vimgolf.com/challenges/584dd156842bd00769000001][Double and switch]]
<2017-01-31 Tue>

Oh, I don't really know the answer and also don't have much interest
to find it out. I decide to give it up.

The following minor mode is for enlarge/shrink the region in binary
way, which might be helpful for answering this challenge.

#+BEGIN_SRC emacs-lisp
(defvar binary-region-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map [?+] #'binary-region+)
    (define-key map [?-] #'binary-region-)
    map))

(define-minor-mode binary-region-mode
  "用二分法扩大或缩小 the region."
  :lighter " Binary-Region"
  :keymap binary-region-mode-map)

(defun binary-region+ (start end)
  (interactive "r")
  (when (use-region-p)
    (set-mark start)
    (goto-char (+ (- end start) end))))

(defun binary-region- (start end)
  (interactive "r")
  (when (use-region-p)
    (set-mark start)
    (goto-char (+ (/ (- end start) 2) start))))
#+END_SRC

* [[https://vimgolf.com/challenges/4d1a71b5b8cb340932000109][Change the content of a string]]
<2017-01-31 Tue>

Edit as usual.

* [[https://vimgolf.com/challenges/54ddd1d261cec11d1b01707c][Mute the second method of this script]]
<2017-01-31 Tue>

1. Mark the method with ~C-M-h~ (~mark-defun~)
2. Comment the region with ~M-:~ (~comment-dwim~)

* [[https://vimgolf.com/challenges/50ae009b65b8db0002000047][Let's play some Ivmgolf]]
<2017-01-31 Tue>

1. Mark "Iv" across 4 lines in rectangle mode with ~C-x SPC~
   (~rectangle-mark-mode~)
2. ~C-x r t Vi RET~ (~string-rectangle~)

* [[https://vimgolf.com/challenges/57a021b0d938573add00bcd0][A grid of punctuation]]
<2017-01-31 Tue>

1. Record a keyboard macro for yanking "-=" and ~C-u 40 C-x e~
   (~kmacro-end-and-call-macro~) to yank 40 times
2. Make the second line by some manually edits
3. Do the similar thing in 1

* [[https://vimgolf.com/challenges/56462467f20fe74c93000001][lipsum lines]]
<2017-01-31 Tue>

1. Delete double-quotes
2. Wrap lines in ~"\1",~ with ~C-M-%~ (~query-replace-regexp~)
3. Cleanup
