#+TITLE: Chunyang Xu's Emacs Configuration
#+AUTHOR: Chunyang Xu
#+EMAIL: xuchunyang56@gmail.com
#+EXCLUDE_TAGS: TOC@3
#+OPTIONS: toc:nil num:nil ^:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />

* Preface

  This is my Emacs configuration, written in [[http://orgmode.org/][Org mode]]. You can find the latest
  version of this configuration in [[https://github.com/xuchunyang/emacs.d][the Github repository]].

  #+TOC: headlines 2

* Init

** Package management

   - Please don't load outdated byte code:

   #+BEGIN_SRC emacs-lisp
     (setq load-prefer-newer t)
   #+END_SRC

   - Don't complain about redefinitions (advice), I don't want to know:

   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'advice
       (setq ad-redefinition-action 'accept))
   #+END_SRC

*** Bootstrap =package.el= (All moved to =init.el=.)

    #+BEGIN_SRC emacs-lisp
      ;; commented, see init.el
      ;; (package-initialize)
    #+END_SRC

    Add more elpa archives like melpa and org elpa.

    #+BEGIN_SRC emacs-lisp :tangle no
      (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
    #+END_SRC

    Some packages appear (usually with different version) in more than one
    archives at the same time.

    #+BEGIN_SRC emacs-lisp :tangle no
      ;; gnu > melpa-stable > melpa
      (setq package-archive-priorities '(("gnu" . 20)
                                         ("melpa-stable" . 10)
                                         ("melpa" . 0)))
    #+END_SRC

*** Bootstrap =use-package=

    I am currently stuck with =use-package= for grouping my package configure, it
    does not play nice with =package.el=, convenient autoload is almost useless if
    using =package.el=.

    Reasons for me to use it:
    1. Grouping package configuration in one sexp
    2. Handy =bind-key=
    3. Fault-tolerant capability

    #+BEGIN_SRC emacs-lisp
      ;; Install if need
      (unless (package-installed-p 'use-package)
        (package-refresh-contents) (package-install 'use-package))

      ;; No autoload is provided, anyway it will load.
      (require 'use-package)
    #+END_SRC

*** TODO Write own =package.el= helper with my limited elisp knowledge

    Define my own silly ~pkg~ macro.

    #+BEGIN_SRC emacs-lisp
      (cl-defmacro pkg (pkg
                         &key
                         disabled
                         load-path
                         setup
                         (feature pkg)
                         after
                         diminish          ; Hide its lighter
                         )
        "If load-path is Non-nil, don't make sure pkg is available via package.el."
        `(condition-case err
             (unless ,disabled
               (if ,load-path
                   (add-to-list 'load-path ,load-path)
                 ;; Make sure PKG is available
                 (unless (package-installed-p ',pkg)
                   (unless (assoc ',pkg package-archive-contents)
                     (package-refresh-contents))
                   (package-install ',pkg)))
               ;; Setup after PKG whenever available
               ,setup
               ;; Setup after FEATURE is loaded
               (with-eval-after-load ',feature
                 ,after
                 (when ',diminish
                   (diminish ',diminish))))
           (error (ignore
                   (display-warning 'bar (format "%s: %s"
                                                 ',pkg (error-message-string err))
                                    :error)))))
    #+END_SRC

    Indentation and Font lock support.

    #+BEGIN_SRC emacs-lisp
      (put 'pkg 'lisp-indent-function 'defun)

      (defconst pkg-font-lock-keywords
        '(("(\\(pkg\\)\\_>[ \t']*\\(\\(?:\\sw\\|\\s_\\)+\\)?"
           (1 font-lock-keyword-face)
           (2 font-lock-constant-face nil t))))

      (font-lock-add-keywords 'emacs-lisp-mode pkg-font-lock-keywords)
    #+END_SRC

    Some practical examples.

    #+BEGIN_SRC emacs-lisp
      ;; 1. just make sure a package is installed
      ;; 2. 1 + run (require 'pkg)
      ;; 3. 1 + bind some autoloaded commands to keys
      ;; 4. 1 + run autoloaded command

      (pkg ace-link
        :setup (ace-link-setup-default))

      ;; 5. 1 + eval-after-load
      ;; 6. 1 + 2 + run some code
      ;; 7. Works with `diminish'
    #+END_SRC

*** Add local ~load-path~

    #+BEGIN_SRC emacs-lisp
      ;; My private packages
      (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
    #+END_SRC

*** Better Package Menu

    #+BEGIN_SRC emacs-lisp
      (use-package paradox
        :ensure t
        :bind (("C-c L p" . paradox-list-packages))
        :config
        ;; Don't ask for a token, please, and don't bug me about asynchronous updates
        (setq paradox-github-token t
              paradox-execute-asynchronously nil))
    #+END_SRC

** Helper Libraries

   #+BEGIN_SRC emacs-lisp
     (require 'subr-x)
     (require 'rx)                           ; Use Lisp style to build regexp
     (use-package dash :ensure t)
   #+END_SRC

   From [[http://lists.gnu.org/archive/html/help-gnu-emacs/2008-06/msg00087.html][Re: Timing execution of function calls in Emacs lisp]].

   #+BEGIN_SRC emacs-lisp
     (defmacro measure-time (&rest body)
       "Measure the time it takes to evaluate BODY."
       `(let ((time (current-time)))
          ,@body
          (message "%.06f" (float-time (time-since time)))))
   #+END_SRC

** Initialization

   #+BEGIN_SRC emacs-lisp
     ;; disable the site default settings (NOTE: I don't know what they are)
     (setq inhibit-default-init t)
   #+END_SRC

   Load Customization file at the very top.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (locate-user-emacs-file "custom.el"))
     (load custom-file 'no-error 'no-message)
   #+END_SRC

   Load my private files, I have personal information like email address and
   passwords etc.

   #+BEGIN_SRC emacs-lisp
     (load "~/.private.el" :no-error)
   #+END_SRC

** Mac OS X

   Change some key bindings for Mac keyboard.

   #+BEGIN_SRC emacs-lisp
     (use-package ns-win
       :if (and (window-system) (eq system-type 'darwin))
       :defer t
       :config (setq ns-pop-up-frames nil ; Don't pop up new frames from the workspace
                     mac-command-modifier 'meta
                     mac-option-modifier 'control))

   #+END_SRC

   Fix shell environments for GNU Emacs.

   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell       ; NOTE: This package is slow
       :ensure t
       :if (and (eq system-type 'darwin) (display-graphic-p))
       :init
       (exec-path-from-shell-copy-env "INFOPATH")
       (exec-path-from-shell-initialize))

     (use-package info                       ; NOTE: Should be fixed during Emacs
                                             ; configure/build period or use
                                             ; Emacs site-init files.
       :defer t
       :config
       (add-to-list 'Info-directory-list "/opt/local/share/info"))
   #+END_SRC

   Also Load my private OS X package.

   #+BEGIN_SRC emacs-lisp
     (use-package chunyang-osx
       :disabled t                           ; FIXME: not working
       :if (eq system-type 'darwin))
   #+END_SRC

** User Interface

*** Hide Tool bar and Scroll bar

    Because they are unnecessary and Emacs doesn't support them very well.  Menu bar
    is not hided on OS X, which I am using, because OS X has a global Menu bar. In
    fact, I do use Menu bar a lot to discover packages' highlighted abilities.

    #+BEGIN_SRC emacs-lisp
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
    #+END_SRC

*** No GNU startup screen & message & beeping

    #+BEGIN_SRC emacs-lisp
      (setq inhibit-startup-screen t)
      (fset 'display-startup-echo-area-message #'ignore)
      (setq ring-bell-function #'ignore)
    #+END_SRC

*** Overwrite all yes/no with y/n

    This is of course unsafe, but it is used too often, even refreshing in =*Help*=
    buffer needs yes/no, let me forget about it.

    #+BEGIN_SRC emacs-lisp
      (fset 'yes-or-no-p #'y-or-n-p)
    #+END_SRC

*** Setup Font

    #+BEGIN_SRC emacs-lisp
      (set-frame-font "Source Code Pro-13" nil t)
    #+END_SRC

**** Emoji and other symbols

     #+BEGIN_SRC emacs-lisp
       ;; Additional fonts for special characters and fallbacks
       ;; Test range: üê∑ ‚äÑ ‚à´ ùõº Œ± üúö
       (when (eq system-type 'darwin)
         ;; Colored Emoji on OS X
         (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji")
                           nil 'prepend)
         (set-fontset-font t 'symbol (font-spec :family "Apple Symbols") nil 'append))
       (set-fontset-font t 'mathematical (font-spec :family "XITS Math") nil 'append)
       ;; Fallback for Greek characters which Source Code Pro doesn't provide.
       (set-fontset-font t 'greek (pcase system-type
                                    (`darwin (font-spec :family "Menlo"))
                                    (_ (font-spec :family "DejaVu Sans Mono")))
                         nil 'append)

       ;; A general fallback for all kinds of unknown symbols
       (set-fontset-font t nil (font-spec :family "Apple Symbols") nil 'append)
     #+END_SRC

**** TODO Chinese Font

     #+BEGIN_SRC emacs-lisp :tangle no
       (when (member "STFangsong" (font-family-list))
         (set-fontset-font t 'han (font-spec :family "STFangsong"))
         (setq face-font-rescale-alist '(("STFangsong" . 1.3))))
     #+END_SRC

*** Load Theme

    #+BEGIN_SRC emacs-lisp
      ;; Let's disable questions about theme loading while we're at it.
      (setq custom-safe-themes t)

      (pkg spacemacs-theme
        :disabled t
        :setup (load-theme 'spacemacs-dark :no-confirm))

      (pkg zenburn-theme
        :setup (load-theme 'zenburn :no-confirm))

      (pkg solarized-theme
        :disabled t
        :feature solarized
        :setup
        (progn
          ;; make the fringe stand out from the background
          (setq solarized-distinct-fringe-background t)

          ;; Don't change the font for some headings and titles
          (setq solarized-use-variable-pitch nil)

          ;; make the modeline high contrast
          (setq solarized-high-contrast-mode-line t)

          ;; Use less bolding
          (setq solarized-use-less-bold t)

          ;; Use more italics
          (setq solarized-use-more-italic t)

          ;; Use less colors for indicators such as git:gutter, flycheck and similar
          ;; (setq solarized-emphasize-indicators nil)

          ;; Don't change size of org-mode headlines (but keep other size-changes)
          (setq solarized-scale-org-headlines nil)

          ;; Avoid all font-size changes
          (setq solarized-height-minus-1 1)
          (setq solarized-height-plus-1 1)
          (setq solarized-height-plus-2 1)
          (setq solarized-height-plus-3 1)
          (setq solarized-height-plus-4 1)

          ;; Load
          (load-theme 'solarized-dark :no-confirm)))
    #+END_SRC

*** Mode line

    Show column number and size always.

    #+BEGIN_SRC emacs-lisp
      (column-number-mode)
      (size-indication-mode)
    #+END_SRC

    The basic way of customizing mode line is changing the variable
    ~mode-line-format~, but some packages provide exiting solutions with different
    styles.

    #+BEGIN_SRC emacs-lisp
      (use-package powerline
        :disabled t
        :ensure t
        :config
        (setq powerline-display-mule-info nil
              powerline-display-buffer-size t)
        :init (powerline-default-theme))

      (use-package smart-mode-line
        :disabled t
        :ensure t
        :config
        (setq sml/no-confirm-load-theme t)
        ;; (setq sml/theme 'respectful)
        (sml/setup))

      (use-package telephone-line
        :disabled t
        :ensure t
        :init (telephone-line-mode))

      (use-package ocodo-svg-modelines
        :disabled t
        :ensure t
        :config
        (ocodo-svg-modelines-init)
        (smt/set-theme 'default))

      (use-package nyan-mode
        :disabled t
        :ensure t
        :config (nyan-mode))
    #+END_SRC

** Emacs session persistence

   Save Emacs session and persist the contents of the =*scratch*= buffer.

   When restoring =*scratch*= from the ~initial-scratch-message~ variable,
   ~substitute-command-keys~ will process the variable and some magic
   translation will be made, such as "'" (normal single quote) becomes "‚Äô" (I
   don't what it is and how to type it). I don't want to learn these new stuff
   at least for now, it is annoying and maybe not worth at all.

   #+BEGIN_SRC emacs-lisp
     (use-package desktop
       :config
       (add-to-list 'desktop-globals-to-save 'initial-scratch-message)
       (desktop-save-mode)

       (add-hook 'kill-emacs-hook
                 (lambda ()
                   ;; Notes: This function must be placed BEFORE `desktop.el' saving
                   ;; values.
                   (setq initial-scratch-message
                         (with-current-buffer "*scratch*"
                           (setq initial-scratch-message
                                 (buffer-string)))))))
   #+END_SRC

   Save minibuffer history. Data is saved in ~savehist-file~.

   #+BEGIN_SRC emacs-lisp
     (use-package savehist
       :init (savehist-mode)
       :config
       (setq history-length 1000
             history-delete-duplicates t
             savehist-additional-variables '(extended-command-history)))
   #+END_SRC

   It is possible to store arbitrary variables by using =desktop= or =savehist=.

   Recent used files.

   #+BEGIN_SRC emacs-lisp
     (use-package recentf
       :config
       (setq recentf-max-saved-items 200
             ;; Cleanup recent files only when Emacs is idle, but not when the mode
             ;; is enabled, because that unnecessarily slows down Emacs. My Emacs
             ;; idles often enough to have the recent files list clean up regularly
             recentf-auto-cleanup 300
             recentf-exclude (list "/\\.git/.*\\'" ; Git contents
                                   "/elpa/.*\\'"   ; Package files
                                   "/itsalltext/"  ; It's all text temp files
                                   ".*\\.gz\\'"
                                   "TAGS"
                                   ".*-autoloads\\.el\\'"))
       (recentf-mode))
   #+END_SRC

   Save point position in files.

   #+BEGIN_SRC emacs-lisp
     (use-package saveplace                  ; Save point position in files
       :init (save-place-mode))
   #+END_SRC

** Buffers, Windows and Frames

   Buffer.

   #+BEGIN_SRC emacs-lisp
     (use-package uniquify                   ; Make buffer names unique (turn on by default)
       :disabled t
       :config (setq uniquify-buffer-name-style 'forward))

     (use-package ibuffer                    ; Better buffer list, compare to `list-buffers'
       :bind ("C-x C-b" . ibuffer))

     (use-package autorevert                 ; Auto-revert buffers of changed files
       :init (global-auto-revert-mode))

     (use-package chunyang-simple
       :bind (("C-x 3" . chunyang-split-window-right)
              ("C-x 2" . chunyang-split-window-below)
              ("C-h t" . chunyang-switch-scratch)))

     (use-package chunyang-buffers          ; Personal buffer tools
       :commands (lunaryorn-do-not-kill-important-buffers)
       :init (add-hook 'kill-buffer-query-functions
                       #'lunaryorn-do-not-kill-important-buffers))

     (bind-key "O" #'delete-other-windows  special-mode-map)
     (bind-key "Q" #'kill-this-buffer      special-mode-map)
   #+END_SRC

   Windows.

   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :preface
       (defun chunyang-ace-window (arg)
         "A modified version of `ace-window'.
     When number of window <= 3, invoke `other-window', otherwise `ace-window'.
     One C-u, swap window, two C-u, delete window."
         (interactive "p")
         (cl-case arg
           (0
            (setq aw-ignore-on
                  (not aw-ignore-on))
            (ace-select-window))
           (4 (ace-swap-window))
           (16 (ace-delete-window))
           (t (if (<= (length (window-list)) 3)
                  (other-window 1)
                (ace-select-window)))))
       :config
       (bind-key "M-o" #'chunyang-ace-window)
       (setq aw-ignore-current t)
       (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))

     (use-package windmove
       :disabled t
       :config (windmove-default-keybindings))

     (use-package winner
       :bind (("M-N" . winner-redo)
              ("M-P" . winner-undo))
       :config (winner-mode))

     (use-package writeroom-mode             ; Distraction-free editing
       :ensure t
       :bind (("C-c t R" . writeroom-mode)))
   #+END_SRC

   Frames.

   #+BEGIN_SRC emacs-lisp
     (setq frame-resize-pixelwise t          ; Resize by pixels
           frame-title-format
           '(:eval (if (buffer-file-name)
                       (abbreviate-file-name (buffer-file-name)) "%b")))

     ;; Ensure that M-v always undoes C-v, so you can go back exactly
     ;; (setq scroll-preserve-screen-position 'always)

     (use-package frame
       :bind (("C-c t F" . toggle-frame-fullscreen)
              ("C-c t m" . toggle-frame-maximized))
       :config
       (add-to-list 'initial-frame-alist '(maximized . fullscreen))
       (unbind-key "C-x C-z"))
   #+END_SRC

** File Handling

   #+BEGIN_SRC emacs-lisp
     ;; Keep backup and auto save files out of the way
     (setq backup-directory-alist `((".*" . ,(locate-user-emacs-file ".backup")))
           auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

     ;; Delete files to trash
     (setq delete-by-moving-to-trash t)

     (use-package files
       :bind (("C-c f u" . revert-buffer)
              ("C-c f n" . normal-mode))
       :config
       ;; Prefer GNU variants
       (setq insert-directory-program "gls"
             find-program "gfind"
             grep-program "grep"))

     ;;; Additional bindings for built-ins
     (bind-key "C-c f v l" #'add-file-local-variable)
     (bind-key "C-c f v p" #'add-file-local-variable-prop-line)

     (use-package ignoramus                  ; Ignore uninteresting files everywhere
       :ensure t
       :init (ignoramus-setup))

     (use-package dired                      ; Edit directories
       :defer t
       :config
       (setq dired-listing-switches "-alh")
       (use-package dired-x
         :commands dired-omit-mode
         :init (add-hook 'dired-mode-hook #'dired-omit-mode))
       (use-package dired-subtree :ensure t :defer t)
       ;; VCS integration with `diff-hl'
       (use-package diff-hl
         :disabled t
         :ensure t
         :defer t
         :init (add-hook 'dired-mode-hook #'diff-hl-dired-mode)))

     (use-package direx
       :disabled t
       :ensure t
       :config
       (push '(direx:direx-mode :position left :width 25 :dedicated t)
             popwin:special-display-config)
       (bind-key "C-x C-J" #'direx:jump-to-directory-other-window))

     (use-package ranger
       :disabled t
       :ensure t)

     (use-package launch                     ; Open files in external programs
       :ensure t
       :defer t)
   #+END_SRC

** Basic Editing

*** TAB, Whitespace, Pairs

    #+BEGIN_SRC emacs-lisp
      ;; Disable tabs, but given them proper width
      (setq-default indent-tabs-mode nil
                    tab-width 8)

      ;; Indicate empty lines at the end of a buffer in the fringe, but require a
      ;; final new line
      (setq indicate-empty-lines t
            require-final-newline t)

      (use-package electric                   ; Electric code layout
        :init (electric-layout-mode))

      (use-package elec-pair                  ; Electric pairs
        :init (electric-pair-mode))
    #+END_SRC

*** Fill

    #+BEGIN_SRC emacs-lisp
      ;; Configure a reasonable fill column, indicate it in the buffer and enable
      ;; automatic filling
      (setq-default fill-column 80)

      ;; I prefer indent long-line code myself
      (setq comment-auto-fill-only-comments t)

      (add-hook 'text-mode-hook #'auto-fill-mode)
      (add-hook 'prog-mode-hook #'auto-fill-mode)

      (diminish 'auto-fill-function)          ; Not `auto-fill-mode' as usual

      (use-package subword                    ; Subword/superword editing
        :defer t
        :diminish subword-mode)

      (use-package adaptive-wrap              ; Choose wrap prefix automatically
        :ensure t
        :defer t
        :init (add-hook 'visual-line-mode-hook #'adaptive-wrap-prefix-mode))

      (use-package visual-fill-column
        :ensure t
        :defer t
        :init (add-hook 'visual-line-mode-hook #'visual-fill-column-mode))
    #+END_SRC

*** Kill Ring

    #+BEGIN_SRC emacs-lisp
      (setq kill-ring-max 200                 ; More killed items
            ;; Save the contents of the clipboard to kill ring before killing
            save-interprogram-paste-before-kill t)
    #+END_SRC

*** Jump to Char, Word, Link etc

    #+BEGIN_SRC emacs-lisp
      (use-package avy
        :ensure t
        :bind (("C-c SPC" . avy-goto-char)
               ("M-g f"   . avy-goto-line))
        :config
        (with-eval-after-load "isearch"
          (define-key isearch-mode-map (kbd "C-'") #'avy-isearch)))

      (use-package ace-link
        :disabled t                           ; Try `pkg'
        :ensure t
        :defer t
        :init (ace-link-setup-default))

      (use-package zop-to-char
        :disabled t
        :ensure t
        :bind (("M-z" . zop-to-char)))

      (use-package avy-zap
        :disabled t
        :bind (("M-z" . avy-zap-to-char-dwim)
               ("M-Z" . avy-zap-up-to-char-dwim)))

      (use-package easy-kill                  ; Easy killing and marking on C-w
        :ensure t
        :bind (([remap kill-ring-save] . easy-kill) ; M-w
               ([remap mark-sexp]      . easy-mark) ; C-M-SPC
               ))

      (use-package expand-region              ; Expand region by semantic units
        :ensure t
        :bind ("C-=" . er/expand-region))

      (use-package align                      ; Align text in buffers
        :bind (("C-c A a" . align)
               ("C-c A c" . align-current)
               ("C-c A r" . align-regexp)))

      (use-package multiple-cursors           ; Edit text with multiple cursors
        :ensure t
        :bind (("C-c o e"     . mc/mark-more-like-this-extended)
               ("C-c o n"     . mc/mark-next-like-this)
               ("C-c o p"     . mc/mark-previous-like-this)
               ("C-c o l"     . mc/edit-lines)
               ("C-c o C-a"   . mc/edit-beginnings-of-lines)
               ("C-c o C-e"   . mc/edit-ends-of-lines)
               ("C-c o h"     . mc/mark-all-like-this-dwim)
               ("C-c o C-s"   . mc/mark-all-in-region)))

      (use-package undo-tree                  ; Branching undo
        :ensure t
        :diminish undo-tree-mode
        :init
        (global-undo-tree-mode))

      (use-package nlinum                     ; Line numbers in display margin
        :ensure t
        :bind (("C-c t l" . nlinum-mode)))

    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      ;; Give us narrowing back!
      (put 'narrow-to-region 'disabled nil)
      (put 'narrow-to-page 'disabled nil)
      (put 'narrow-to-defun 'disabled nil)

      (put 'view-hello-file
           'disabled "I mistype C-h h a lot and it is too slow to block Emacs")

      (defun view-help-buffer ()
        "View the `*Help*' buffer."
        (interactive)
        (display-buffer (help-buffer)))

      (bind-key "C-h h" #'view-help-buffer)

      (put 'upcase-region 'disabled nil)
      (put 'downcase-region 'disabled nil)
    #+END_SRC

** Navigation and scrolling

   Ensure that M-v always undoes C-v, so you can go back exactly.

   #+BEGIN_SRC emacs-lisp
     (setq scroll-preserve-screen-position 'always)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (setq scroll-margin 0                   ; Drag the point along while scrolling
           scroll-conservatively 1000        ; Never recenter the screen while scrolling
           scroll-error-top-bottom t         ; Move to beg/end of buffer before
                                             ; signalling an error
           ;; These settings make trackpad scrolling on OS X much more predictable
           ;; and smooth
           mouse-wheel-progressive-speed nil
           mouse-wheel-scroll-amount '(1))

     (use-package page-break-lines           ; Turn page breaks into lines
       :ensure t
       :diminish page-break-lines-mode
       :defer t
       :init (add-hook 'prog-mode-hook #'page-break-lines-mode))

     (use-package outline                    ; Navigate outlines in buffers
       :disabled t
       :diminish outline-minor-mode
       :config (dolist (hook '(text-mode-hook prog-mode-hook))
                 (add-hook hook #'outline-minor-mode)))

     (use-package imenu
       :init
       ;; Helper function
       (defun my-imenu--build-expression (name)
         "Return `imenu-generic-expression' of macro or function NAME."
         (list
          name (rx-to-string
                `(and ,(concat "(" name)
                      symbol-end (1+ (syntax whitespace)) symbol-start
                      (group-n 1 (1+ (or (syntax word) (syntax symbol))))
                      symbol-end)) 1))

       (defun my-imenu--setup-elisp ()
         (dolist (name '("use-package" "pkg" "defhydra"))
           (add-to-list 'imenu-generic-expression (my-imenu--build-expression name))))

       (add-hook 'emacs-lisp-mode-hook #'my-imenu--setup-elisp))

     (use-package imenu-anywhere             ; Helm-based imenu across open buffers
       :ensure t
       :bind ("C-c I" . helm-imenu-anywhere))

     (use-package imenu-list
       :disabled t
       :ensure t)

     (use-package origami :ensure t :defer t)

   #+END_SRC

** Search

   #+BEGIN_SRC emacs-lisp
     (setq isearch-allow-scroll t)

     (use-package grep
       :defer t
       :config
       (dolist (file '("TAGS" "GPATH" "GRTAGS" "GTAGS"))
         (add-to-list 'grep-find-ignored-files file))
       (add-to-list 'grep-find-ignored-directories "auto")
       (add-to-list 'grep-find-ignored-directories "elpa")
       (use-package wgrep :ensure t :defer t))

     (use-package anzu                       ; Position/matches count for isearch
       :ensure t
       :diminish anzu-mode
       :init (global-anzu-mode)
       :config
       (setq anzu-replace-to-string-separator " => ")
       (bind-key "M-%" 'anzu-query-replace)
       (bind-key "C-M-%" 'anzu-query-replace-regexp))

     (use-package pinyin-search
       :ensure t
       :defer t)
   #+END_SRC

** Highlight

   #+BEGIN_SRC emacs-lisp
     (use-package whitespace                 ; Highlight bad whitespace (tab)
       :bind ("C-c t w" . whitespace-mode))

     (use-package hl-line
       :bind ("C-c t L" . hl-line-mode)
       :init
       (use-package hl-line+ :ensure t :defer t))

     (use-package paren                      ; Highlight paired delimiters
       :init (show-paren-mode))

     (use-package rainbow-delimiters         ; Highlight delimiters by depth
       :ensure t
       :defer t
       :init (dolist (hook '(text-mode-hook prog-mode-hook))
               (add-hook hook #'rainbow-delimiters-mode)))

     (use-package hl-todo
       :ensure t
       :defer t
       :init (add-hook 'prog-mode-hook #'hl-todo-mode))

     (use-package color-identifiers-mode
       :ensure t
       :diminish color-identifiers-mode
       :bind ("C-c t c" . global-color-identifiers-mode)
       ;; Need to save my eyes
       ;; :init (add-hook 'after-init-hook #'global-color-identifiers-mode)
       )

     (use-package highlight-numbers          ; Fontify number literals
       :disabled t
       :ensure t
       :config
       (add-hook 'prog-mode-hook #'highlight-numbers-mode))

     (use-package highlight-symbol           ; Highlighting and commands for symbols
       :ensure t
       :diminish highlight-symbol-mode
       :init
       ;; Navigate occurrences of the symbol under point with M-n and M-p
       (add-hook 'prog-mode-hook #'highlight-symbol-nav-mode)
       ;; Highlight symbol occurrences
       (add-hook 'prog-mode-hook #'highlight-symbol-mode)
       :config
       (setq highlight-symbol-on-navigation-p t))

     (use-package rainbow-mode               ; Fontify color values in code
       :ensure t
       :diminish rainbow-mode
       :config (add-hook 'css-mode-hook #'rainbow-mode))

   #+END_SRC

** Skeletons, completion and expansion

   #+BEGIN_SRC emacs-lisp
     (use-package hippie-exp                 ; Powerful expansion and completion
       :bind (([remap dabbrev-expand] . hippie-expand))
       :config
       (setq hippie-expand-try-functions-list
             '(
               ;; Try to expand word "dynamically", searching the current buffer.
               try-expand-dabbrev
               ;; Try to expand word "dynamically", searching all other buffers.
               try-expand-dabbrev-all-buffers
               ;; Try to expand word "dynamically", searching the kill ring.
               try-expand-dabbrev-from-kill
               ;; Try to complete text as a file name, as many characters as unique.
               try-complete-file-name-partially
               ;; Try to complete text as a file name.
               try-complete-file-name
               ;; Try to expand word before point according to all abbrev tables.
               try-expand-all-abbrevs
               ;; Try to complete the current line to an entire line in the buffer.
               try-expand-list
               ;; Try to complete the current line to an entire line in the buffer.
               try-expand-line
               ;; Try to complete as an Emacs Lisp symbol, as many characters as
               ;; unique.
               try-complete-lisp-symbol-partially
               ;; Try to complete word as an Emacs Lisp symbol.
               try-complete-lisp-symbol)))

     (use-package company                    ; Graphical (auto-)completion
       :ensure t
       :diminish company-mode
       :commands company-complete
       :init (global-company-mode)
       :config
       ;; Use Company for completion
       (bind-key [remap completion-at-point] #'company-complete company-mode-map)
       (setq company-tooltip-align-annotations t
             company-minimum-prefix-length 2
             ;; Easy navigation to candidates with M-<n>
             company-show-numbers t)
       (dolist (hook '(git-commit-mode-hook mail-mode-hook))
         (add-hook hook (lambda ()
                          (setq-local company-backends '(company-ispell))))))

     (use-package auto-complete
       :disabled t
       :ensure t
       :config
       (ac-config-default)
       (setq ac-auto-show-menu 0.3
             ;; ac-delay 0.1
             ac-quick-help-delay 0.5)
       (use-package ac-ispell
         :ensure t
         :config
         ;; Completion words longer than 4 characters
         (setq ac-ispell-requires 4
               ac-ispell-fuzzy-limit 2)

         (eval-after-load "auto-complete"
           '(progn
              (ac-ispell-setup)))

         (add-hook 'git-commit-mode-hook 'ac-ispell-ac-setup)
         (add-hook 'mail-mode-hook 'ac-ispell-ac-setup)))

     (use-package yasnippet
       :disabled t
       :ensure t
       :diminish yas-minor-mode
       :config (yas-global-mode))
   #+END_SRC

** Spelling and syntax checking

   Spell checking with =ispell= and =flyspell=.

   #+BEGIN_SRC emacs-lisp
     (use-package flyspell
       :diminish flyspell-mode
       :init
       (use-package ispell
         :config (setq ispell-program-name "aspell"
                       ispell-extra-args '("--sug-mode=ultra")))
       (add-hook 'text-mode-hook #'flyspell-mode)
       (add-hook 'prog-mode-hook #'flyspell-prog-mode)
       :config
       (unbind-key "C-." flyspell-mode-map)
       (unbind-key "C-M-i" flyspell-mode-map)
       (unbind-key "C-;" flyspell-mode-map)
       (use-package helm-flyspell
         :disabled t
         :ensure t
         :init
         (bind-key "C-." #'helm-flyspell-correct flyspell-mode-map))
       (pkg flyspell-popup
         :load-path "~/wip/flyspell-popup"
         :setup
         (progn
           (require 'flyspell-popup)
           (bind-key "C-." #'flyspell-popup-correct flyspell-mode-map)
           (add-hook 'flyspell-mode-hook #'flyspell-popup-auto-correct-mode))))
   #+END_SRC

   English grammar and style check.

   #+BEGIN_SRC emacs-lisp
     (pkg langtool
       :after
       (setq langtool-language-tool-jar
             "~/Downloads/LanguageTool-3.0/languagetool-commandline.jar"
             langtool-default-language "en-US"
             langtool-mother-tongue "en"
             ;; Disable annoying rules when working in org-mode, see more rules at
             ;; [[https://www.languagetool.org/languages/][LanguageTool Supported Languages]]
             ;; Even though, it is still almost unuseable.
             langtool-disabled-rules
             '(
               ;; Whitespace repetition (bad formatting)
               "WHITESPACE_RULE"
               ;; Unpaired braces, brackets, quotation marks and similar symbols
               "EN_UNPAIRED_BRACKETS"
               ;; Use of whitespace before comma and before/after parentheses
               "COMMA_PARENTHESIS_WHITESPACE")))

     (use-package writegood-mode :ensure t :defer t)
   #+END_SRC

   Programming syntax check.

   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :bind (("C-c t f" . global-flycheck-mode)
              ("C-c L e" . list-flycheck-errors))
       :config
       (setq flycheck-emacs-lisp-load-path 'inherit)

       (use-package flycheck-pos-tip           ; Show Flycheck messages in popups
         :disabled t
         :ensure t
         :config (setq flycheck-display-errors-function
                       #'flycheck-pos-tip-error-messages))

       (use-package flycheck-color-mode-line
         :disabled t
         :ensure t
         :config
         (eval-after-load "flycheck"
           (add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))))
   #+END_SRC

** Markdown

   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t
       :mode ("README\\.md\\'" . gfm-mode)
       :config
       (setq markdown-command "kramdown"))
   #+END_SRC

** YAML

   #+BEGIN_SRC emacs-lisp
     ;; FIXME: just make sure installed
     (use-package yaml-mode :ensure t :defer t)
   #+END_SRC

** Programming utilities

   #+BEGIN_SRC emacs-lisp
     (use-package compile
       :bind (("C-c C" . compile))
       :preface
       (defun compilation-ansi-color-process-output ()
         (ansi-color-process-output nil)
         (set (make-local-variable 'comint-last-output-start)
              (point-marker)))

       :config
       (setq compilation-ask-about-save nil         ; Just save before compiling
             compilation-always-kill t
             compilation-scroll-output 'first-error ; Automatically scroll to first error
             )
       (add-hook 'compilation-filter-hook #'compilation-ansi-color-process-output))

     (use-package quickrun
       :ensure t :defer t
       :config (push "*quickrun*" popwin:special-display-config))

     (use-package prog-mode
       :bind (("C-c t p" . prettify-symbols-mode)))
   #+END_SRC

** Generic Lisp

   #+BEGIN_SRC emacs-lisp
     (use-package paredit                    ; Balanced sexp editing
       :ensure t
       :diminish paredit-mode
       :commands paredit-mode
       :config
       (unbind-key "M-r" paredit-mode-map) (bind-key "M-R" #'paredit-raise-sexp  paredit-mode-map)
       (unbind-key "M-s" paredit-mode-map) (bind-key "M-S" #'paredit-splice-sexp paredit-mode-map)
       (unbind-key "C-j" paredit-mode-map)
       (unbind-key "M-q" paredit-mode-map)

       (use-package paredit-menu
         :ensure t
         :commands menubar-paredit))
   #+END_SRC

** Emacs lisp

   #+BEGIN_SRC emacs-lisp
     (use-package lisp-mode
       :defer t
       :preface
       ;; (defadvice pp-display-expression (after make-read-only (expression out-buffer-name) activate)
       ;;   "Enable `view-mode' in the output buffer - if any - so it can be closed with `\"q\"."
       ;;   (when (get-buffer out-buffer-name)
       ;;     (with-current-buffer out-buffer-name
       ;;       (view-mode))))

       (defun chunyang-elisp-function-or-variable-quickhelp (symbol)
         "Display a short documentation of function or variable using `popup'.

     See also `describe-function-or-variable'."
         (interactive
          (let* ((v-or-f (variable-at-point))
                 (found (symbolp v-or-f))
                 (v-or-f (if found v-or-f (function-called-at-point)))
                 (found (or found v-or-f)))
            (list v-or-f)))
         (if (not (and symbol (symbolp symbol)))
             (message "You didn't specify a function or variable.")
           (let* ((fdoc (when (fboundp symbol)
                          (or (documentation symbol t) "Not documented.")))
                  (fdoc-short (and (stringp fdoc)
                                   (substring fdoc 0 (string-match "\n" fdoc))))
                  (vdoc (when  (boundp symbol)
                          (or (documentation-property symbol 'variable-documentation t)
                              "Not documented as a variable.")))
                  (vdoc-short (and (stringp vdoc)
                                   (substring vdoc 0 (string-match "\n" vdoc)))))
             (and (require 'popup nil 'no-error)
                  (popup-tip
                   (or
                    (and fdoc-short vdoc-short
                         (concat fdoc-short "\n\n"
                                 (make-string 30 ?-) "\n" (symbol-name symbol)
                                 " is also a " "variable." "\n\n"
                                 vdoc-short))
                    fdoc-short
                    vdoc-short)
                   :margin t)))))

       :config
       (bind-key "C-h C-." #'chunyang-elisp-function-or-variable-quickhelp)
       (bind-key "M-:"     #'pp-eval-expression)
       (bind-key "C-c t d" #'toggle-debug-on-error)

       (use-package rebox2
         :ensure t
         :diminish rebox-mode
         :bind ("M-q" . rebox-dwim)
         :preface
         (defun chunyang--elisp-comment-setup ()
           (setq-local rebox-style-loop '(21 23 25 27))
           (setq-local rebox-min-fill-column 40)))

       ;; TODO make my own hook func
       (add-hook 'emacs-lisp-mode-hook #'paredit-mode)
       (add-hook 'emacs-lisp-mode-hook #'ipretty-mode)
       ;; (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
       ;;   (add-hook hook 'turn-on-elisp-slime-nav-mode))
       (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
       (add-hook 'emacs-lisp-mode-hook #'chunyang--elisp-comment-setup))

     (use-package chunyang-elisp
       :config
       (bind-key "C-M-;" #'comment-or-uncomment-sexp emacs-lisp-mode-map))

     (use-package ielm
       :config
       (add-hook 'ielm-mode-hook #'enable-paredit-mode))

     (use-package aggressive-indent
       :ensure t
       :defer t
       :diminish aggressive-indent-mode)

     (use-package macrostep
       :ensure t
       :bind ("C-c e" . macrostep-expand))

     (use-package elisp-slime-nav
       :ensure t
       :diminish elisp-slime-nav-mode
       :bind ("C-h ." . elisp-slime-nav-describe-elisp-thing-at-point))

     (use-package ipretty             :ensure t :defer t)
     (use-package pcache              :ensure t :defer t)
     (use-package persistent-soft     :ensure t :defer t)
     (use-package command-log-mode    :ensure t :defer t)
     (use-package log4e               :ensure t :defer t)
     (use-package alert               :ensure t :defer t)
     (use-package bug-hunter          :ensure t :defer t)
   #+END_SRC

** Other Programming languages

*** Common Lisp

    #+BEGIN_SRC emacs-lisp
      (use-package slime
        :ensure t
        :defer t
        :config
        ;; Set your lisp system and, optionally, some contribs
        (setq inferior-lisp-program "sbcl")
        (setq slime-contribs '(slime-fancy)))
    #+END_SRC

*** Haskell

    #+BEGIN_SRC emacs-lisp
      (use-package haskell-mode
        :disabled t
        :ensure t
        :config
        (add-hook 'haskell-mode-hook #'haskell-indentation-mode)
        (add-hook 'haskell-mode-hook #'interactive-haskell-mode))
    #+END_SRC

*** Scheme

    #+BEGIN_SRC emacs-lisp
      (use-package geiser
        :disabled t
        :ensure t
        :config
        ;; geiser replies on a REPL to provide autodoc and completion
        (setq geiser-mode-start-repl-p t)
        :init
        (add-hook 'scheme-mode-hook (lambda () (paredit-mode))))
    #+END_SRC

*** Ruby

    #+BEGIN_SRC emacs-lisp
      (pkg inf-ruby)
    #+END_SRC

*** C

    #+BEGIN_SRC emacs-lisp
      (pkg ggtags
        :disabled t
        :setup (add-hook 'c-mode-hook #'ggtags-mode))
    #+END_SRC

*** Lua

    #+BEGIN_SRC emacs-lisp
      (pkg lua-mode)
    #+END_SRC

** Version Control

   #+BEGIN_SRC emacs-lisp
     (use-package git-gutter
       :ensure t
       :diminish git-gutter-mode
       :bind (("C-x C-g" . git-gutter:toggle)
              ("C-x v n" . git-gutter:next-hunk)
              ("C-x v p" . git-gutter:previous-hunk)
              ("C-x v s" . git-gutter:stage-hunk)
              ("C-x v r" . git-gutter:revert-hunk))
       :init
       (setq git-gutter:handled-backends '(git svn))
       (global-git-gutter-mode))

     (use-package git-messenger
       :ensure t
       :bind ("C-x v P" . git-messenger:popup-message))

     (use-package magit
       :ensure t
       :bind (("C-x g"   . magit-status)
              ("C-x M-g" . magit-dispatch-popup))
       :config
       (setq magit-revert-buffers t))

     (use-package git-timemachine            ; Go back in Git time
       :ensure t
       :bind ("C-x v t" . git-timemachine))

     (use-package gitconfig-mode             ; Edit .gitconfig files
       :ensure t
       :defer t)

     (use-package gitignore-mode             ; Edit .gitignore files
       :ensure t
       :defer t)

     ;;; emacs vc-mode & svn
     ;;  - [[http://lifegoo.pluskid.org/wiki/EmacsSubversion.html][Emacs ÈÖçÂêà Subversion ‰ΩøÁî®]]
     ;;  - [[http://lifegoo.pluskid.org/wiki/EmacsVC.html][EmacsVC]]

     (use-package psvn :ensure t :defer t)

     ;; svn issues a warning ("cannot set LC_CTYPE locale") if LANG is not set.
     (setenv "LANG" "C")
   #+END_SRC

** Tools and utilities

   #+BEGIN_SRC emacs-lisp
     (use-package edit-server
       :ensure t
       :defer 10
       :config
       (setq edit-server-new-frame nil)
       (edit-server-start))

     (use-package ediff
       :defer t
       :config
       (setq ediff-window-setup-function 'ediff-setup-windows-plain
             ediff-split-window-function 'split-window-horizontally)
       (setq ediff-custom-diff-program "diff"
             ediff-custom-diff-options "-u"))

     (use-package server
       :defer 7
       :config
       (unless (server-running-p) (server-start)))

     (use-package helm-open-github  :ensure t :defer t)
     (use-package gh-md             :ensure t :defer t)

     (use-package helm-github-stars
       :ensure t
       :config
       (add-hook 'helm-github-stars-clone-done-hook #'dired)
       (setq helm-github-stars-refetch-time (/ 6.0 24)
             helm-github-stars-full-frame t
             helm-github-stars-default-sources '(hgs/helm-c-source-stars
                                                 hgs/helm-c-source-repos)))

     (use-package which-key
       :disabled t
       :ensure t
       :config (which-key-mode))
   #+END_SRC

** Web & IRC & Email & RSS

   #+BEGIN_SRC emacs-lisp
     (use-package erc
       :config
       ;; Join the #emacs channels whenever connecting to Freenode.
       (setq erc-autojoin-channels-alist '(("freenode.net" "#emacs")))

       ;; Shorten buffer name (e.g., "freenode" instead of "irc.freenode.net:6667")
       (setq erc-rename-buffers t)

       (defun chat ()
         "Chat in IRC with ERC."
         (interactive)
         (erc :server "irc.freenode.net"
              :port "6667"
              :nick erc-nick
              :password erc-password)))

     (use-package sx                  :ensure t :defer t)
     (use-package helm-zhihu-daily    :ensure t :defer t)

     (use-package google-this
       :ensure t
       :diminish google-this-mode
       :preface (defvar google-this-keybind (kbd "C-c G"))
       :init (google-this-mode))

   #+END_SRC

** Eshell

   #+BEGIN_SRC emacs-lisp
     (use-package eshell
       :preface
       (defun eshell* ()
         "Start a new eshell even if one is active."
         (interactive)
         (eshell t))
       (defun eshell-clear-buffer ()
         "Clear terminal"
         (let ((inhibit-read-only t))
           (erase-buffer)
           (eshell-send-input)))
       (defun eshell/mcd (dir)
         "make a directory and cd into it"
         (eshell/mkdir "-p" dir)
         (eshell/cd dir))
       (defun eshell-insert-last-arg ()
         "Insert the last arg of the last command, like ESC-. in shell."
         (interactive)
         (with-current-buffer "*eshell*"
           (let ((last-arg
                  (car (last
                        (split-string
                         (substring-no-properties (eshell-get-history 0)))))))
             (when last-arg
               (insert last-arg)))))
       :bind  (("C-!"   . eshell-command)
               ("C-x m" . eshell)
               ("C-x M" . eshell*))
       :config
       (setq eshell-history-size 5000)       ; Same as $HISTSIZE
       (setq eshell-hist-ignoredups t)       ; make the input history more bash-like
       (setq eshell-banner-message
             '(concat (shell-command-to-string "fortune") "\n"))
       ;; needed at least for `eshell-git-prompt'
       (setq eshell-highlight-prompt nil)

       (defun eshell/x ()
         (insert "exit")
         (eshell-send-input)
         (delete-window))
                                             ; (I don't know what this means)
       (add-hook 'eshell-mode-hook
                 (lambda ()
                   ;; Setup smart shell
                   ;; (require 'em-smart)
                   ;; (eshell-smart-initialize)
                   (bind-keys :map eshell-mode-map
                              ("TAB"     . helm-esh-pcomplete)
                              ;; ("M-p"     . helm-eshell-history)
                              ;; ("C-l"     . eshell-clear-buffer)
                              ("C-c C-k" . compile)
                              ("C-c C-q" . eshell-kill-process)
                              ("C-c ."   . eshell-insert-last-arg))
                   (eshell/export "EDITOR=emacsclient -n")
                   (eshell/export "VISUAL=emacsclient -n"))))

     (pkg eshell-git-prompt
       :load-path "~/wip/eshell-git-prompt"
       :setup (progn (require 'eshell-git-prompt)
                     (eshell-git-prompt-use-theme 'powerline)))

     (pkg eshell-z
       :load-path "~/wip/eshell-z"
       :setup (require 'eshell-z))

     (pkg eshell-did-you-mean
       :load-path "~/wip/eshell-did-you-mean"
       :setup
       (progn
         (require 'eshell-did-you-mean)
         (eshell-did-you-mean-setup)))
   #+END_SRC

** [[https://github.com/emacs-helm/helm][helm]]

*** Initial Setup since helm is a very large package

    #+BEGIN_SRC emacs-lisp
      ;;; Prepare
      (use-package helm :ensure t :defer t)

      ;; FIXME: helm-config.el seems doesn't play nice with package.el, for example,
      ;; it should not load autoload file again.

      (defvar helm-command-prefix-key "C-c h") ; need to be defined before require due
                                              ;  to not using customization, I am not
                                              ;  sure if there is any other
                                              ;  alternative way, this is too bad.
      (require 'helm-config)

      ;;; Setup of Helm's Sub-packages

      (use-package helm-mode                  ; Use helm completing everywhere
        :diminish helm-mode
        :config (helm-mode))

      (use-package helm-adaptive
        :disabled t                           ; I don't its function really is
        :config (helm-adaptive-mode))

      (use-package helm-command               ; helm-M-x
        :defer t
        :config (setq helm-M-x-always-save-history t))

      (use-package helm-buffers
        :defer t
        :config
        (add-to-list 'helm-boring-buffer-regexp-list "TAGS")
        (add-to-list 'helm-boring-buffer-regexp-list "git-gutter:diff")

        (defun helm-buffer-switch-to-new-window (_candidate)
          "Display buffers in new windows."
          ;; Select the bottom right window
          (require 'winner)
          (select-window (car (last (winner-sorted-window-list))))
          ;; Display buffers in new windows
          (dolist (buf (helm-marked-candidates))
            (select-window (split-window-right))
            (switch-to-buffer buf))
          ;; Adjust size of windows
          (balance-windows))

        (add-to-list 'helm-type-buffer-actions
                     '("Display buffer(s) in new window(s) `M-o'" .
                       helm-buffer-switch-new-window) 'append)

        (defun helm-buffer-switch-new-window ()
          (interactive)
          (with-helm-alive-p
            (helm-quit-and-execute-action 'helm-buffer-switch-to-new-window)))

        (define-key helm-buffer-map (kbd "M-o") #'helm-buffer-switch-new-window)

        (defun helm-buffer-imenu (candidate)
          "Imenu action for helm buffers."
          (switch-to-buffer candidate)
          ;; (call-interactively #'helm-imenu)
          (require 'helm-imenu)
          (unless helm-source-imenu
            (setq helm-source-imenu
                  (helm-make-source "Imenu" 'helm-imenu-source
                    :fuzzy-match helm-imenu-fuzzy-match)))
          (let ((imenu-auto-rescan t))
            ;; FIXME: can't execute action in nest helm session,
            ;; maybe something is special in `helm-source-imenu'.
            (helm :sources 'helm-source-imenu
                  :buffer "*helm imenu*"
                  :resume 'noresume
                  :allow-nest t)))

        (add-to-list 'helm-type-buffer-actions
                     '("Imenu" . helm-buffer-imenu) 'append)

        (defun helm-buffer-insert-buffer-name (candidate)
          (insert (buffer-name candidate)))

        (add-to-list 'helm-type-buffer-actions
                     '("Insert buffer name at point" .
                       helm-buffer-insert-buffer-name) :append))

      (use-package helm-files
        :defer t
        :config
        ;; Add imenu action to 'C-x C-f'
        (defun helm-find-file-imenu (file)
          (helm-find-file-or-marked file)
          (call-interactively #'helm-imenu))

        (add-to-list 'helm-find-files-actions
                     '("Imenu" . helm-find-file-imenu)
                     'append)

        ;; Add Virtual Dired files action (inspired by `helm-projectile')
        (defun chunyang-dired-files (file)
          (let ((files (mapcar #'file-relative-name (helm-marked-candidates)))
                (new-name (completing-read
                           "Select or enter a new buffer name: "
                           (cl-loop for b in (buffer-list)
                                    when (with-current-buffer b (eq major-mode 'dired-mode))
                                    collect (buffer-name b)))))
            (with-current-buffer (dired (cons (make-temp-name new-name)
                                              files))
              (when (get-buffer new-name)
                (kill-buffer new-name))
              (rename-buffer new-name))))
        (add-to-list 'helm-find-files-actions
                     '("Dired file(s) by Chunyang `C-c f'" . chunyang-dired-files)
                     'append)
        (defun helm-buffer-run-dired-files ()
          "Run ediff action from `helm-source-buffers-list'."
          (interactive)
          (with-helm-alive-p
            (helm-exit-and-execute-action 'chunyang-dired-files)))
        (bind-key "C-c f" #'helm-buffer-run-dired-files helm-find-files-map)

        (add-to-list 'helm-boring-file-regexp-list ".DS_Store")

        (pkg helm-ls-git)

        (use-package helm-ls-svn
          :load-path "~/wip/chunyang/helm-ls-svn.el"
          :bind ("M-8" . helm-ls-svn-ls))

        (use-package helm-fuzzy-find
          :load-path "~/wip/helm-fuzzy-find/"
          :commands helm-fuzzy-find))

      (use-package helm-grep
        ;; Must make sure `wgrep-helm' is available first and do NOT load it
        ;; since it is soft loaded in `helm-grep'
        :preface (use-package wgrep-helm :ensure t :defer t)
        ;; Don't load helm-grep, ti is also bad, `use-package' also doesn't play nice
        ;; with `package.el', since autoload stuff usually is done automatically by
        ;; the latter.
        :defer t)

      (use-package helm-ring
        :defer t
        :config
        (add-to-list 'helm-kill-ring-actions
                     '("Yank(s)" .
                       (lambda (_candidate)
                         (insert
                          (mapconcat #'identity (helm-marked-candidates) "\n"))))))

      (use-package helm-man
        :defer t
        :config
        ;; helm needs a relatively new man version, which is not provided on even
        ;; latest OS X (10.10) and also not available on MacPorts
        (setq helm-man-format-switches "%s"))

      ;; Set up shorter key bindings
      (bind-keys ("M-x"                            . helm-M-x)
                 ;; File
                 ("C-x C-f"                        . helm-find-files)
                 ("C-x f"                          . helm-recentf)
                 ("C-x C-d"                        . helm-browse-project)
                 ;; Buffer
                 ([remap switch-to-buffer]         . helm-buffers-list)       ; C-x b
                 ("M-l"                            . helm-mini)               ; M-l
                 ;; Kill Ring
                 ([remap yank-pop]                 . helm-show-kill-ring)     ; M-y
                 ("C-z"                            . helm-resume)
                 ;; Register
                 ([remap jump-to-register]         . helm-register)
                 ;; Help
                 ([remap apropos-command]          . helm-apropos)            ; C-h a
                 ;; Bookmark
                 ([remap bookmark-jump]            . helm-filtered-bookmarks) ; C-x r b
                 ;; TAGS
                 ;; ([remap xref-find-definitions] . helm-etags-select)
                 ;;  Mark Ring
                 ;; ("C-c <SPC>"                      . helm-all-mark-rings)
                 ;; Occur
                 ("M-i"                            . helm-occur)
                 ;; Imenu
                 ("C-o"                            . helm-semantic-or-imenu))

      (bind-keys :map helm-command-map
                 ("g"   . helm-chrome-bookmarks)
                 ("z"   . helm-complex-command-history)
                 ("C-/" . helm-fuzzy-find)
                 ("G"   . helm-github-stars))
      (bind-key "M-I" #'helm-do-grep)

    #+END_SRC

    Helm, please don't break my current buffer at least.

    #+BEGIN_SRC emacs-lisp
      (setq helm-split-window-default-side 'other)
    #+END_SRC

*** Always show helm's completing buffer in the bottom with [[https://github.com/wasamasa/shackle][shackle]] and some dirty hack

    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :ensure t
        :config
        (setq helm-display-function #'pop-to-buffer)

        (use-package shackle
          :ensure t
          :diminish shackle-mode
          :config
          (setq shackle-rules
                '(("\\`\\*helm.*?\\*\\'" :regexp t :align t :ratio 0.46)))
          (shackle-mode)))
    #+END_SRC

*** Hide helm's mode line

    The mode line of helm completing buffer is very informative. The following
    dirty hack provides a way to not display it.

    #+BEGIN_SRC emacs-lisp :tangle no
      (setq helm-echo-input-in-header-line t)
      ;; Hide minibuffer when the above option is on.
      (add-hook 'helm-minibuffer-set-up-hook #'helm-hide-minibuffer-maybe)

      ;; Don't use helm's own displaying mode line function
      (fset 'helm-display-mode-line #'ignore)

      (defun hide-mode-line-of-helm-buffer ()
        "Hide mode line in `helm-buffer'."
        (with-helm-buffer
          (setq-local mode-line-format nil)))

      (add-hook 'helm-after-initialize-hook #'hide-mode-line-of-helm-buffer)
    #+END_SRC

*** Hide all bottom buffers' mode line during helm session

    This is my answer to [[http://emacs.stackexchange.com/questions/15233/hide-modeline-in-all-bottom-windows-while-helm-is-active][Hide modeline in all bottom windows while helm is
    active?]], it is not work perfectly, for example, at least not working in
    ~helm-resume~, so I don't use it in day-to-day life. Just for fun.

    #+BEGIN_SRC emacs-lisp :tangle no
      ;; 1. Collect bottom buffers
      (with-eval-after-load 'helm

        (defvar bottom-buffers nil
          "List of bottom buffers before helm session.
      Its element is a pair of `buffer-name' and `mode-line-format'.")

        (defun bottom-buffers-init ()
          (setq bottom-buffers
                (cl-loop for w in (window-list)
                         when (window-at-side-p w 'bottom)
                         collect (with-current-buffer (window-buffer w)
                                   (cons (buffer-name) mode-line-format)))))

        (add-hook 'helm-before-initialize-hook #'bottom-buffers-init)

        ;; 2. Hide mode line
        (defun bottom-buffers-hide-mode-line ()
          (mapc (lambda (elt)
                  (with-current-buffer (car elt)
                    (setq-local mode-line-format nil)))
                bottom-buffers))

        (add-hook 'helm-after-initialize-hook #'bottom-buffers-hide-mode-line)

        ;; 3. Restore mode line
        (defun bottom-buffers-show-mode-line ()
          (when bottom-buffers
            (mapc (lambda (elt)
                    (with-current-buffer (car elt)
                      (setq-local mode-line-format (cdr elt))))
                  bottom-buffers)
            (setq bottom-buffers nil)))

        (add-hook 'helm-exit-minibuffer-hook #'bottom-buffers-show-mode-line)

        (defun helm-keyboard-quit-advice (orig-func &rest args)
          (bottom-buffers-show-mode-line)
          (apply orig-func args))

        (advice-add 'helm-keyboard-quit :around #'helm-keyboard-quit-advice)

        ;; Create a command to disable this feature
        (defun helm-turn-off-hide-bottom-buffers-mode-line ()
          (interactive)
          (remove-hook 'helm-before-initialize-hook #'bottom-buffers-init)
          (remove-hook 'helm-after-initialize-hook #'bottom-buffers-hide-mode-line)
          (remove-hook 'helm-exit-minibuffer-hook #'bottom-buffers-show-mode-line)
          (advice-remove 'helm-keyboard-quit #'helm-keyboard-quit-advice)))
    #+END_SRC

*** TODO Make helm window smaller by using ~display-buffer-alist~

    It seems not working anymore with latest helm, actually, I copied this code
    snippet from somewhere, probably reddit, and I don't how it works. I think
    studying ~display-buffer-alist~ should help.

    #+BEGIN_SRC emacs-lisp :tangle no
      (defun toggle-small-helm-window ()
        (interactive)
        (if (get 'toggle-small-helm-window 'once)
            (setq display-buffer-alist
                  (seq-remove
                   (lambda (elt)
                     (and (stringp (car elt))
                          (string-match "helm" (car elt))))
                   display-buffer-alist))
          (add-to-list 'display-buffer-alist
                       `(,(rx bos "*helm" (* not-newline) "*" eos)
                         (display-buffer-in-side-window)
                         (inhibit-same-window . t)
                         (window-height . 0.4))))
        (put 'toggle-small-helm-window
             'once (not (get 'toggle-small-helm-window 'once))))
    #+END_SRC

** [[https://github.com/emacs-helm/helm-descbinds][helm-descbinds]]

   Type '?' (or 'C-h) when you forget some key shortcuts to list all possible
   commands with <prefix>, it is a helm frontend for describe-bindings.

   TODO: this package is a bit outdated, for instance, matched can't be highlighted,
   someone should update it, actually, I have tried for several times, but all
   failed because of the difficulty of backward compatibility, maybe I should try
   again and at least ask its developers for help before giving up again.

   #+BEGIN_SRC emacs-lisp
     (use-package helm-descbinds
       :ensure t
       :config
       (setq helm-descbinds-window-style 'split-window)
       (helm-descbinds-mode))
   #+END_SRC

** [[https://github.com/syohex/emacs-helm-ag][helm-ag]]

   Though helm itself has all common search tools (that is, grep, git-grep, ack and
   ag) supports, some third-part packages, like this one, are more powerful by
   providing more features and being more focus.

   #+BEGIN_SRC emacs-lisp
     (use-package helm-ag
       :ensure t
       ;; TODO: Copy more command usages here
       :bind (("C-c s" . helm-do-ag) ; C-u chooses file type, C-- enter your own cmd
                                             ; options
              ("C-c S" . helm-do-ag-project-root)))
   #+END_SRC

** swiper (only use =ivy= as =helm= replacement)

   Disabled for being conflicted with =helm=.

   #+BEGIN_SRC emacs-lisp
     (pkg swiper
       :load-path "~/wip/swiper"
       :setup (require 'swiper))

     (use-package swiper
       :disabled t
       :load-path "~/wip/swiper"
       :bind ("C-z" . ivy-resume)
       :config
       ;; Type `C-u C-j' or `C-M-j' or `C-RET' to use entered text and exit
       (bind-key "<C-return>" #'ivy-immediate-done ivy-minibuffer-map)

       (setq ivy-use-virtual-buffers t
             ivy-count-format "(%d/%d) ")

       ;; [[https://github.com/abo-abo/swiper/wiki/Customize-candidate-menu-style][Customize candidate menu style ¬∑ abo-abo/swiper Wiki]]
       (setq ivy-format-function 'eh-ivy-format-function)
       (defun eh-ivy-format-function (cands)
         (let ((i -1))
           (mapconcat
            (lambda (s)
              (concat (if (eq (cl-incf i) ivy--index)
                          "üëâ "
                        "   ")
                      s))
            cands "\n")))

       (use-package ivy
         ;; :diminish (ivy-mode . " üôè")
         :config (ivy-mode)))

     (use-package counsel
       :disabled t
       :load-path "~/wip/swiper"
       :bind (("M-x"     . counsel-M-x)
              ("C-x C-f" . counsel-find-file)
              ("M-l"     . ivy-switch-buffer)
              ("C-x f"   . ivy-recentf))
       :init (require 'counsel))
   #+END_SRC

** mu4e

   =mu= and =offlineimap= are needed to be installed and configured correctly,
   besides, =proxychains-ng= is used as a proxy because the SMTP connection of
   Gmail is blocked on purpose in my country.  All of them can be installed from
   =MacPorts=.

   #+BEGIN_SRC emacs-lisp
     (use-package mu4e
       :load-path "/opt/local/share/emacs/site-lisp/mu4e"
       :commands mu4e
       :config
       ;; Setup
       (setq mu4e-drafts-folder "/[Gmail].Drafts"
             mu4e-sent-folder   "/[Gmail].Sent Mail"
             mu4e-trash-folder  "/[Gmail].Trash"
             mu4e-refile-folder "/[Gmail].All Mail")

       (setq mu4e-headers-skip-duplicates t)

       (setq mu4e-attachment-dir (expand-file-name "~/Downloads"))

       ;; Fetch - Read new mail when I'm ready.
       ;; updating mail using 'U' in the main view:
       (setq mu4e-get-mail-command "proxychains4 offlineimap")

       ;; Read
       (setq mu4e-bookmarks
             '(("flag:unread AND NOT flag:trashed" "Unread messages"      ?u)
               ("date:today..now"                  "Today's messages"     ?t)
               ("date:7d..now"                     "Last 7 days"          ?w))
             mu4e-maildir-shortcuts
             '( ("/INBOX"               . ?i)
                ("/[Gmail].Sent Mail"   . ?s)
                ("/[Gmail].Trash"       . ?t)
                ("/[Gmail].All Mail"    . ?a)))

       ;; show images
       (setq mu4e-view-show-images t)

       ;; use imagemagick, if available
       (when (fboundp 'imagemagick-register-types)
         (imagemagick-register-types))

       ;; convert html emails properly
       ;; Possible options:
       ;;   - html2text -utf8 -width 72
       ;;   - textutil -stdin -format html -convert txt -stdout
       ;;   - html2markdown | grep -v '&nbsp_place_holder;' (Requires html2text pypi)
       ;;   - w3m -dump -cols 80 -T text/html
       ;;   - view in browser (provided below)
       (setq mu4e-html2text-command "textutil -stdin -format html -convert txt -stdout")

       ;; Write
       ;; spell check
       (add-hook 'mu4e-compose-mode-hook
                 (defun my-do-compose-stuff ()
                   "My settings for message composition."
                   (set-fill-column 72)
                   (flyspell-mode)))

       (setq mu4e-compose-signature "Chunyang Xu")

       ;; Send via msmtp (for socks proxy support)
       (setq message-sendmail-f-is-evil 't)
       (setq message-send-mail-function 'message-send-mail-with-sendmail)
       (setq sendmail-program "msmtp")
       (setq message-sendmail-extra-arguments (list "-a" "default"))

       ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
       (setq mu4e-sent-messages-behavior 'delete)

       ;; don't keep message buffers around
       (setq message-kill-buffer-on-exit t)

       ;; org-mode support
       (require 'org-mu4e)
       (use-package mu4e-maildirs-extension  ; Show maildirs summary in mu4e-main-view
         :disabled t
         :ensure t
         :init (mu4e-maildirs-extension)))

     (use-package helm-mu
       :ensure t
       :defer t
       :config (setq helm-mu-gnu-sed-program "gsed"
                     helm-mu-skip-duplicates t))
   #+END_SRC

** Dictionary

   #+BEGIN_SRC emacs-lisp
     (use-package youdao-dictionary
       :load-path "~/wip/youdao-dictionary"
       :bind (("C-c y" . youdao-dictionary-search)
              ("C-c Y" . youdao-dictionary-search-at-point+))
       :config (setq url-cache-expire-time (* 60 60 24) ; 24 hours
                     url-automatic-caching t))

     (use-package translate-shell
       :disabled t
       :load-path "~/wip/translate-shell.el"
       :bind (("C-c s"   . translate-shell-brief)
              ("C-c S"   . translate-shell))
       :config
       ;; <https://translate.google.com> is blocked in China for no apparent
       ;; reason. No one ever asked my option.
       (setq translate-shell-command "proxychains4 -q trans -t en %s"
             translate-shell-brief-command "proxychains4 -q trans -brief -t zh %s"))

     (use-package osx-dictionary
       :ensure t
       :bind ("C-c d" . osx-dictionary-search-pointer))

     (use-package bing-dict
       :ensure t
       :preface
       (defun say ()
         (interactive)
         (let ((text (if (use-region-p)
                         (buffer-substring (region-beginning) (region-end))
                       (thing-at-point 'word))))
           (when text
             (start-process "say" nil "say" text))))
       :config
       (setq bing-dict-query-word-at-point-timer
             (run-with-idle-timer 2.1 t
                                  (lambda ()
                                    (let ((word (thing-at-point 'word)))
                                      (when (and word (> (length word) 3) (< (length word) 21)
                                                 (not (minibufferp)))
                                        (my-log "%s" word)
                                        (bing-dict-brief word))))))
       (defun bing-dict-stop-timer ()
         (interactive)
         (cancel-timer bing-dict-query-word-at-point-timer)
         (message "bing-dict-query-word-at-point-timer canceled")))
   #+END_SRC

** Web Development

   #+BEGIN_SRC emacs-lisp
     (use-package restclient :ensure t :defer t)
   #+END_SRC

** Org

   #+BEGIN_SRC emacs-lisp
     (use-package org
       :bind (("C-c a"   . org-agenda)
              ("C-c c"   . org-capture)
              ("C-c l"   . org-store-link)
              ("C-c C-o" . org-open-at-point-global))
       :config
       (bind-key "C-o" #'helm-org-headlines org-mode-map)

       (setq org-todo-keywords
             '((sequence "TODO(t)" "WAITING(w@)" "|" "DONE(d)")
               (sequence "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED")
               (sequence "|" "CANCELED(c@)")))

       (setq org-directory "~/Dropbox/Notes")
       (setq org-agenda-files (list org-directory))

       (setq org-default-notes-file "~/Dropbox/Notes/notes.org")

       (setq org-capture-templates
             '(("t" "todo"
                entry (file (expand-file-name "refile.org" org-directory))
                "* TODO %?\n  %i\n  %a")
               ("n" "note"
                entry (file (expand-file-name "refile.org" org-directory))
                "* %?\n  %i\n  %a")))

       (setq org-log-done 'time)

       ;; Targets include this file and any file contributing to the agenda - up to 3 levels deep
       (setq org-refile-targets (quote (;; (nil :maxlevel . 1)
                                        (org-default-notes-file :maxlevel . 2))))

       (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
          (sh . t)))

       (setq org-confirm-babel-evaluate nil)

       (setq org-edit-src-auto-save-idle-delay 5))

     (use-package org-mac-link
       :if (eq system-type 'darwin)
       :ensure t
       :commands (;; org-mac-firefox-insert-frontmost-url
                  org-mac-chrome-insert-frontmost-url))

     (pkg orglink
       :diminish orglink-mode
       :setup (global-orglink-mode))

     (pkg toc-org)

     (pkg org-bullets
       :disabled t
       :setup
       (add-hook 'org-mode-hook #'org-bullets-mode))
   #+END_SRC

** Emacs Helper

*** TODO Add a common help key bindings here

    #+BEGIN_SRC emacs-lisp
      (bind-key "C-h C-k" #'find-function-on-key)
    #+END_SRC

** Emacs Development

   Tag search.

   #+BEGIN_SRC emacs-lisp
     (setq tags-table-list '("~/wip/emacs"))
   #+END_SRC

** Misc built-in packages

   #+BEGIN_SRC emacs-lisp
     (global-prettify-symbols-mode)

     (use-package bookmark
       :defer t
       :config (setq bookmark-save-flag 1))

     (use-package checkdoc
       :config (setq checkdoc-arguments-in-order-flag nil
                     checkdoc-force-docstrings-flag nil))
   #+END_SRC
** Echo Area

   Show unfinished commands in echo area, one second is a bit too long.

   #+BEGIN_SRC emacs-lisp
     (setq echo-keystrokes 0.5)
   #+END_SRC

** helm-pages

#+BEGIN_SRC emacs-lisp
  (pkg helm-pages
    :load-path "~/wip/helm-pages"
    :setup (require 'helm-pages))
#+END_SRC

** helm-joe

#+BEGIN_SRC emacs-lisp
  (use-package helm-joe
    :commands helm-joe)
#+END_SRC


* Stuff to do
** Fix maximize window with desktop.el on OS X

   Some extra blank space is always left when start Emacs. Not sure it is caused by
   session.el or Emacs for OS X.

** Is it possible to use Network proxy within Emacs?

   Unfortunately, I am living in China where many important networks are blocked by
   [[https://en.wikipedia.org/wiki/Great_Firewall][Great Firewall]], so to use twittering-mode is impossible.

   How network stuff works is still like magic.

** What about another new GUI Emacs for Mac OS X?

   The idea comes from [[http://vimr.org/][VimR ‚Äî Refined Vim Experience For OS X]].

   Try to reuse code from emacs-mac if really want to try.

** Emacs for OS X: Write a command prompt in GUI, like C-P in Sublime and Atom, or C-O in Xcode

** Use Yasnippet for keeping my personal snippet

   This is not the typical use-case of =yasnippet=, and I am still not a big fan of
   it, but I find myself repeating myself a lot.

** Write easy-to-use commands to search Emacs src, others' configs and my own configs

   They all can be done via =helm-projectile=, but I don't like this package
   because it is overly complex design, which makes it buggy, besides, it doesn't
   play good with =helm=.

** Write another helm front-end for projectile

   The exiting one is complex and buggy.

** Fix theme can't always load correctly issue
** Learn the ~mode-line-format~ syntax to customize mode line manually and third-part packages
** Check bad =use-package= setups, especially in =:config=
** The incremental search for Chinese Pinyin

   Like [[http://0xcc.net/migemo/][Migemo: The incremental search for Japanese remains of Roman]], it has
   vim/emacs plugin, helm supports it too.
** Make a useful dictionary app for Emacs

   - Provide suggestion for unfinished and incorrect words in real time
   - Preview word's explanation in real time

** Restart GUI Emacs
