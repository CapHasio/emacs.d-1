# -*- eval: (toc-org-mode); -*-

#+PROPERTY: header-args:elisp :results pp

* Table of Contents                                               :TOC:QUOTE:
#+BEGIN_QUOTE
- [[#defsubst][=defsubst=]]
- [[#1--2--3----100][1 + 2 + 3 + ... + 100]]
- [[#1-2-3--list-1-2-3][='(1 2 3)= ≠ =(list 1 2 3)=]]
- [[#cl-loop][=cl-loop=]]
  - [[#append-vs-collect][=append= vs =collect=]]
  - [[#in-ref-vs-in][=in-ref= vs =in=]]
  - [[#into][=into=]]
  - [[#nconc-vs-append][=nconc= vs =append=]]
  - [[#return][=return=]]
  - [[#if][=if=]]
  - [[#by][=by=]]
  - [[#across-ref][=across-ref=]]
  - [[#vconcat][=vconcat=]]
  - [[#nest-cl-loop][nest cl-loop]]
  - [[#byte-compiling-cl-loop-is-important][Byte-compiling cl-loop is important]]
#+END_QUOTE

* =defsubst=

使用 =defsubst= 定义 Inline Function —— 像 Macro 的 Function。

#+BEGIN_SRC elisp
(defsubst foo () (message "Foo is an inline funciton"))
#+END_SRC

#+RESULTS:
: foo

经过 Byte-compile，调用 Inline Function 的地方会像 Macro 那样直接插入 Function Body，从而避免函数调用的负担。

#+BEGIN_SRC elisp
(defun bar () (foo))
(byte-compile 'bar)
(symbol-function 'bar)
#+END_SRC

#+RESULTS:
: #[nil "\300\301!\207" [message "Foo is an inline funciton"] 2]

* 1 + 2 + 3 + ... + 100

Bad (waste space)

#+BEGIN_SRC elisp
(apply #'+ (number-sequence 1 100))
#+END_SRC

#+RESULTS:
: 5050

Bad

#+BEGIN_SRC elisp
(cl-reduce #'+ (number-sequence 1 100))
#+END_SRC

#+RESULTS:
: 5050

Best

#+BEGIN_SRC elisp
(cl-loop for i from 1 to 100
         sum i)
#+END_SRC

#+RESULTS:
: 5050

Good

#+BEGIN_SRC elisp
(let ((i 1)
      (sum 0))
  (while (<= i 100)
    (setq sum (+ sum i))
    (setq i (1+ i)))
  sum)
#+END_SRC

#+RESULTS:
: 5050

Good

#+BEGIN_SRC elisp
(require 'stream)
(seq-reduce #'+ (stream-range 1 101) 0)
#+END_SRC

#+RESULTS:
: 5050

* ='(1 2 3)= ≠ =(list 1 2 3)=

这两种写法有本质不同，有时能交换使用，有时又不能。选中那种写法首先考虑对不对，然后在考虑风格。

- =`(,1 2 3)= ≠ =(list 1 2 3)=
- =`(,1 ,2 3)= ≠ =(list 1 2 3)=
- =`(,1 ,2 ,3)= = =(list 1 2 3)=

=bar= 一般属于错误：

#+BEGIN_SRC elisp
(defun foo () (list 1 2 3))
(defun bar () '(1 2 3))
#+END_SRC

#+RESULTS:
: bar

#+BEGIN_SRC elisp :results pp
(cl-incf (car (bar)) 100)
(cl-incf (car (bar)) 100)
(symbol-function 'bar)
#+END_SRC

#+RESULTS:
: (lambda nil
:   '(201 2 3))

* =cl-loop=

** =append= vs =collect=

#+BEGIN_SRC elisp
(cl-loop for k in '(1 2 3)
         for v in '(a b c)
         collect (list k v))
#+END_SRC

#+RESULTS:
: ((1 a)
:  (2 b)
:  (3 c))

#+BEGIN_SRC elisp
(cl-loop for k in '(1 2 3)
         for v in '(a b c)
         append (list k v))
#+END_SRC

#+RESULTS:
: (1 a 2 b 3 c)

** =in-ref= vs =in=

#+BEGIN_SRC elisp
(let ((nums (list 1 2 3)))
  (cl-loop for i in nums
           do (cl-incf i))
  nums)
#+END_SRC

#+RESULTS:
: (1 2 3)

#+BEGIN_SRC elisp
(let ((nums (list 1 2 3)))
  (cl-loop for i in-ref nums
           do (cl-incf i))
  nums)
#+END_SRC

#+RESULTS:
: (2 3 4)

** =into=

#+BEGIN_SRC elisp
(cl-loop for i from 1 to 100
         sum i into result
         finally return (format "1 + 2 + 3 ... + 100 = %s" result))
#+END_SRC

#+RESULTS:
: "1 + 2 + 3 ... + 100 = 5050"

** =nconc= vs =append=

#+BEGIN_SRC elisp
(let ((l (list (list 1) (list 2) (list 3))))
  (cl-loop for i in l
           append i)
  l)
#+END_SRC

#+RESULTS:
: ((1)
:  (2)
:  (3))

#+BEGIN_SRC elisp
(let ((l (list (list 1) (list 2) (list 3))))
  (cl-loop for i in l
           nconc i)
  l)
#+END_SRC

#+RESULTS:
: ((1 2 3)
:  (2 3)
:  (3))

** =return=

#+BEGIN_SRC elisp
(cl-loop for i from 1
         when (> i 100)
         return "look ma, not catch/throw")
#+END_SRC

#+RESULTS:
: "look ma, not catch/throw"

** =if=

#+BEGIN_SRC elisp
(cl-loop for i from 1 to 10
         if (cl-evenp i)
         collect i into evens
         else
         collect i into odds
         finally return (list odds evens))
#+END_SRC

#+RESULTS:
: ((1 3 5 7 9)
:  (2 4 6 8 10))

** =by=

#+BEGIN_SRC elisp
(cl-loop for (a b) on '(1 2 3 4 5 6) by #'cddr
         collect (cons a b))
#+END_SRC

#+RESULTS:
: ((1 . 2)
:  (3 . 4)
:  (5 . 6))

** =across-ref=

#+BEGIN_SRC elisp
;; 2 维数组
(cl-loop with vv = (make-vector 4 nil)
         for v across-ref vv
         do (setq v (make-vector 3 0))
         finally return vv)
#+END_SRC

#+RESULTS:
: [[0 0 0]
:  [0 0 0]
:  [0 0 0]
:  [0 0 0]]

** =vconcat=

#+BEGIN_SRC elisp
(cl-loop for i from 1 to 3
         vconcat (list i))
#+END_SRC

#+RESULTS:
: [1 2 3]

#+BEGIN_SRC elisp
;; 2 维数组
(cl-loop repeat 4
         vconcat (vector (make-vector 3 0)))
#+END_SRC

#+RESULTS:
: [[0 0 0]
:  [0 0 0]
:  [0 0 0]
:  [0 0 0]]

** nest cl-loop

#+BEGIN_SRC elisp
(let ((vv [[1 2 3]
           [4 5 6]
           [7 8 9]]))
  (cl-loop for v across vv
           sum (cl-loop for i across v
                        sum i)))
#+END_SRC

#+RESULTS:
: 45

#+BEGIN_SRC elisp
(let ((vv [[1 2 3]
           [4 5 6]
           [7 8 9]]))
  (cl-loop for v across vv
           append (cl-loop for i across v
                           collect i)))
#+END_SRC

#+RESULTS:
: (1 2 3 4 5 6 7 8 9)

** Byte-compiling cl-loop is important

#+BEGIN_SRC elisp
(defun foo ()
  (cl-loop for i below 10000
           do (cl-loop for j below 10000)))

(benchmark-run 1 (foo))
#+END_SRC

#+RESULTS:
: (18.556844 1 0.09451100000001134)

#+BEGIN_SRC elisp
(defun bar ()
  (cl-loop for i below 10000
           do (cl-loop for j below 10000)))

(byte-compile 'bar)
(benchmark-run 1 (bar))
#+END_SRC

#+RESULTS:
: (2.316306 0 0.0)
