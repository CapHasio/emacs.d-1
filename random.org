* Table of Contents                                               :TOC:QUOTE:
#+BEGIN_QUOTE
- [[#defsubst][=defsubst=]]
- [[#1--2--3----100][1 + 2 + 3 + ... + 100]]
- [[#1-2-3--list-1-2-3][='(1 2 3)= ≠ =(list 1 2 3)=]]
#+END_QUOTE

* =defsubst=

使用 =defsubst= 定义 Inline Function —— 像 Macro 的 Function。

#+BEGIN_SRC elisp
(defsubst foo () (message "Foo is an inline funciton"))
#+END_SRC

#+RESULTS:
: foo

经过 Byte-compile，调用 Inline Function 的地方会像 Macro 那样直接插入 Function Body，从而避免函数调用的负担。

#+BEGIN_SRC elisp
(defun bar () (foo))
(byte-compile 'bar)
(symbol-function 'bar)
#+END_SRC

#+RESULTS:
: #[nil "\300\301!\207" [message "Foo is an inline funciton"] 2]

* 1 + 2 + 3 + ... + 100

Bad (waste space)

#+BEGIN_SRC elisp
(apply #'+ (number-sequence 1 100))
#+END_SRC

#+RESULTS:
: 5050

Bad

#+BEGIN_SRC elisp
(cl-reduce #'+ (number-sequence 1 100))
#+END_SRC

#+RESULTS:
: 5050

Best

#+BEGIN_SRC elisp
(cl-loop for i from 1 to 100
         sum i)
#+END_SRC

#+RESULTS:
: 5050

Good

#+BEGIN_SRC elisp
(let ((i 1)
      (sum 0))
  (while (<= i 100)
    (setq sum (+ sum i))
    (setq i (1+ i)))
  sum)
#+END_SRC

#+RESULTS:
: 5050

Good

#+BEGIN_SRC elisp
(require 'stream)
(seq-reduce #'+ (stream-range 1 101) 0)
#+END_SRC

#+RESULTS:
: 5050

* ='(1 2 3)= ≠ =(list 1 2 3)=

这两种写法有本质不同，有时能交换使用，有时又不能。选中那种写法首先考虑对不对，然后在考虑风格。

- =`(,1 2 3)= ≠ =(list 1 2 3)=
- =`(,1 ,2 3)= ≠ =(list 1 2 3)=
- =`(,1 ,2 ,3)= = =(list 1 2 3)=

=bar= 一般属于错误：

#+BEGIN_SRC elisp
(defun foo () (list 1 2 3))
(defun bar () '(1 2 3))
#+END_SRC

#+RESULTS:
: bar

#+BEGIN_SRC elisp :results pp
(cl-incf (car (bar)) 100)
(cl-incf (car (bar)) 100)
(symbol-function 'bar)
#+END_SRC

#+RESULTS:
: (lambda nil
:   '(201 2 3))

# Local Variables:
# eval: (toc-org-mode)
# End:
