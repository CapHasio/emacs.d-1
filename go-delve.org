#+TITLE: Delve + Emacs

Delve 是一个 Go Debugger，提供了 JSON-RPC API，试试在 Emacs 中控制它。

* 已有的包

关于 Emacs 配合 Delve，已经有两个包了，我一个也没有用过。

- [[https://github.com/benma/go-dlv.el/][go-dlv.el]] :: 基于 comint-mode，实现简单，估计功能有限
- [[https://github.com/emacs-lsp/dap-mode#go-1][emacs-lsp/dap-mode: Emacs Debug Adapter Protocol]] :: …

* 初步思路

- 使用 =jsonrpc.el= 让 Delve 和 Emacs 能够交流
- 研究下 Emacs 在 Debug 的流程？我没经验
  + (info "(emacs) Debuggers") gud.el
  + [[https://github.com/realgud/realgud][realgud]] 可能这个比较好扩展？

* 重要链接

- [[https://github.com/go-delve/delve/tree/master/Documentation][Delve Documentation]]

* 一步一个脚印

** 先试一试

开启服务器：

#+BEGIN_SRC sh :dir ~/go/src/github.com/xuchunyang/playground/
dlv debug --headless --api-version=2 --log --listen=127.0.0.1:8181
#+END_SRC

Delve 用 TCP Socket，不是 HTTP。使用 Netcat 测试连接：

#+BEGIN_EXAMPLE
~$ nc 127.0.0.1 8181
{"method":"RPCServer.ListSources","params":[],"id":3}
{
  "id": 3,
  "result": {
    "Sources": [
      "/Users/xcy/go/src/github.com/xuchunyang/helloworld/main.go",
      "/usr/local/Cellar/go/1.13.3/libexec/src/errors/errors.go",
      "/usr/local/Cellar/go/1.13.3/libexec/src/errors/wrap.go",
      "/usr/local/Cellar/go/1.13.3/libexec/src/fmt/format.go",
      ……
      "/usr/local/Cellar/go/1.13.3/libexec/src/unicode/tables.go",
      "/usr/local/Cellar/go/1.13.3/libexec/src/unicode/utf8/utf8.go",
      "<autogenerated>"
    ]
  },
  "error": null
}
#+END_EXAMPLE

成功。

** 用 Emacs Lisp 手动实现以上

需要同时管理 Server 和 Client。

*** Server

#+BEGIN_SRC elisp
(let ((default-directory "/Users/xcy/go/src/github.com/xuchunyang/helloworld/"))
  (make-process
   :name "dlv server"
   :buffer "*dlv server*"
   :connection-type 'pipe
   :coding 'utf-8-emacs-unix
   :noquery t
   :command (split-string
             "dlv debug --headless --api-version=2 --log --listen=127.0.0.1:8181")))
#+END_SRC

*** Client

#+BEGIN_SRC elisp
(make-network-process
 :name "dlv client"
 :buffer "*dlv client*"
 :coding 'utf-8-emacs-unix
 :host 'local
 :service 8181)

(process-send-string
 (get-buffer-process "*dlv client*")
 "{\"method\":\"RPCServer.ListSources\",\"params\":[],\"id\":3}\n")
#+END_SRC

OK。

*** TODO 一个疑问：上面明明需要两个 Emacs subprocess，而 Eglot 貌似只用一个 process，它是怎么做到的？
