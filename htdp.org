#+TITLE: How to Design Programs
#+DATE: <2020-01-15 Wed>

* Exercise
** Part 1. Fixed-Size Data
:PROPERTIES:
:header-args:racket: :lang htdp/bsl :results output
:END:
*** 1

#+begin_src racket
(define x 5)
(define y 12)

(sqrt (+ (* x x) (* y y)))
#+end_src

#+RESULTS:
: 13

*** 2

#+begin_src racket
(define prefix "hello")
(define suffix "world")
(string-append prefix "_" suffix)
#+end_src

#+RESULTS:
: hello_world

*** 3

#+begin_src racket
(define str "helloworld")
(define i 5)

(string-append (substring str 0 i)
               "_"
               (substring str i))
#+end_src

#+RESULTS:
: hello_world

*** 4

#+begin_src racket
(define str "helloworld")
(define ind "0123456789")
(define i 5)

(string-append (substring str 0 i)
               (substring str (+ i 1)))
#+end_src

#+RESULTS:
: helloorld

[0, 9]

*** 5

#+begin_src racket
#lang htdp/bsl

(require 2htdp/image)

(define COLOR "aquamarine")
(define HEIGHT 60)
(define WIDTH 300)

(define h HEIGHT)
(define w (/ WIDTH 3))

(beside
 (triangle/sas h 90 w "solid" COLOR)
 (rectangle    w h "solid" COLOR)
 (triangle/ass 90 h w "solid" COLOR))
#+end_src

*** 6

#+begin_src racket
(require 2htdp/image)

(define cat (bitmap/url "https://htdp.org/2019-02-24/cat1.png"))

(* (image-width cat) (image-height cat))
#+end_src

#+RESULTS:
: 8775

*** 7

#+begin_src racket
(define sunny #true)
(define friday #false)

(or (not sunny) friday)
#+end_src

#+RESULTS:
: #false

4

*** 8

#+begin_src racket
(require 2htdp/image)

(define cat (bitmap/url "https://htdp.org/2019-02-24/cat1.png"))

(if (>= (image-height cat) (image-width cat))
    "tall"
    "wide")
#+end_src

#+RESULTS:
: tall

#+begin_src racket
(require 2htdp/image)

;;                     宽 高
(define pic (rectangle 100 50 "solid" "orange"))

(if (>= (image-height pic) (image-width pic))
    "tall"
    "wide")
#+end_src

#+RESULTS:
: wide

#+begin_src racket
(require 2htdp/image)

;; (define image (circle 100 "solid" "green"))
;; (define image (rectangle 100 50 "solid" "green"))
(define image (rectangle 50 100 "solid" "green"))

(define width  (image-width image))
(define height (image-height image))

(if (> width height)
    "wide"
    (if (< width height)
        "tall"
        "square"))
#+end_src

#+RESULTS:
: tall

*** 9

#+begin_src racket
(require 2htdp/image)

;; (define in "hello")
;; (define in (circle 5 "solid" "red"))
;; (define in 0)
(define in #false)

(if (string? in)
    (string-length in)
    (if (image? in)
        (* (image-width in) (image-height in))
        (if (number? in)
            (if (<= in 0)
                in
                (- in 1))
            (if in
                10
                20))))
#+end_src

#+RESULTS:
: 20

*** 10

*** 11

#+begin_src racket
(define (distance x y)
  (sqrt (+ (* x x) (* y y))))

(distance 3 4)
(distance 5 12)
(distance 5 0)
(distance 1 1)
#+end_src

#+RESULTS:
: 5
: 13
: 5
: #i1.4142135623730951

*** 12

#+begin_src racket
(define (cvolume a)
  (* a a a))

(define (csurface a)
  (* 6 (* a a)))

(cvolume 1)
(csurface 1)
#+end_src

#+RESULTS:
: 1
: 6

*** 13

#+begin_src racket
(define (string-first s) (substring s 0 1))

(string-first "hello")
#+end_src

#+RESULTS:
: h

*** 14

#+begin_src racket
(define (string-last s)
  (substring
   s
   (- (string-length s) 1)
   (string-length s)))

(string-last "hello")
#+end_src

#+RESULTS:
: o

*** 15

#+begin_src racket
(define (==> sunny friday)
  (or (not sunny) friday))

(==> #false #true)
#+end_src

#+RESULTS:
: #true

*** 16

#+begin_src racket
(require 2htdp/image)

(define (image-area image)
  (* (image-width image) (image-height image)))

(image-area (rectangle 10 20 "solid" "pink"))
#+end_src

#+RESULTS:
: 200

*** 17

#+begin_src racket
(require 2htdp/image)

(define (image-classify image)
  (if (> (image-width image) (image-height image))
      "wide"
      (if (< (image-width image) (image-height image))
          "tall"
          "square")))

(image-classify (circle 10 "solid" "blue"))
(image-classify (rectangle 10 20 "solid" "red"))
(image-classify (rectangle 20 10 "solid" "green"))
#+end_src

#+RESULTS:
: "square"
: "tall"
: "wide"

*** 18

#+begin_src racket
(define (string-join s1 s2)
  (string-append s1 "_" s2))

(string-join "hello" "world")
#+end_src

#+RESULTS:
: "hello_world"

*** 19

#+begin_src racket
(define (string-insert str i)
  (string-append (substring str 0 i)
                 "_"
                 (substring str i (string-length str))))

(string-insert "helloworld" 5)
(string-insert "" 0)
#+end_src

#+RESULTS:
: "hello_world"
: "_"

*** 20

#+begin_src racket
(define (string-delete str i)
  (string-append (substring str 0 i)
                 (substring str (+ i 1))))

(string-delete "hello" 4)
;; can't deal with empty string
;; (string-delete "" 0)
#+end_src

#+RESULTS:
: "hell"

*** 21

=(+ (ff 1) (ff 1))= 中，DrRacket 的 stepper 没有重用 =(ff 1)= 的值。

*** 22

*** 23

*** 24

*** 25

*** 26

*** 27

#+begin_src racket
(define base-attendees 120)
(define base-price 5.0)
(define attendees-change-per-cent 15)

(define (attendees ticket-price)
  (- base-attendees
     (* (/ (- ticket-price base-price) 0.1)
        attendees-change-per-cent)))

(define (revenue ticket-price)
  (* ticket-price (attendees ticket-price)))

(define fix-cost 0)
(define cost-per-attendee 1.5)

(define (cost ticket-price)
  (+ fix-cost (* cost-per-attendee (attendees ticket-price))))

(define (profit ticket-price)
  (- (revenue ticket-price)
     (cost ticket-price)))

(profit 1)
(profit 2)
(profit 3)
(profit 4)
(profit 5)
#+end_src

#+RESULTS:
: -360
: 285
: 630
: 675
: 420

*** 28

*** 29

*** 30

#+begin_src racket
(define price-sensitivity (/ 15 0.1))
#+end_src

*** 31

*** 32
声音、摄像头、键盘、鼠标、触摸板、温度、亮度、手势、触摸屏、蓝牙、wifi

