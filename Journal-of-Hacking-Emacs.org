#+TITLE: Hacking Emacs——作为一种生活方式
#+AUTHOR: Chunyang Xu
#+EMAIL: mail@xuchunyang.me

不知不觉我的 Emacs 配置已经两岁了，总共六百多次 Commit，平均下来每天都有修改，折腾 Emacs 与打飞机一道已然成了我的日常。

* <2016-12-15 Thu> 获取自己的和 Star 了的仓库
  最近我有两个需求：
  1. =git-clone= 自己的仓库时，不知道地址；
  2. 需要打开某个 Star 了的仓库是，不知道地址。

  虽然 helm-github-stars.el 能解决这个需求，但我还是打算自己实现一个最小化的，不必和 Helm 捆绑在一块儿。我打算用 Jonas Bernoulli（目前 Magit 的维护者）所开发的 =ghub= ——一个很简单的 GitHub API 客户端。

** 为 =ghub= 设置 GitHub 用户名和 API Token
   #+BEGIN_SRC sh
   $ git config --global github.user xuchunyang
   $ cat ~/.authinfo
   machine api.github.com login xuchunyang password 0d4de538064g3f962d3f5g988db29fce1g55bg41
   #+END_SRC

** 测试 API
   GitHub API 文档中的相关部分：
   - [[https://developer.github.com/v3/repos/#list-your-repositories][Repositories | List your repositories]]
   - [[https://developer.github.com/v3/activity/starring/#list-repositories-being-starred][Starring | List repositories being starred]]

   #+BEGIN_SRC elisp
   (setq chunyang-github-repos
         (--keep (cdr (assq 'full_name it))
                 (let ((ghub-unpaginate t))
                   (ghub-get "/user/repos"))))

   (setq chunyang-github-stars
         (--keep (cdr (assq 'full_name it))
                 (let ((ghub-unpaginate t))
                   (ghub-get "/user/starred"))))
   #+END_SRC

   虽然速度不快，但 GitHub 还能访问。

** 写用户命令

   #+BEGIN_SRC elisp :tangle lisp/chunyang-github.el
   ;;; chunyang-github.el --- Access GitHub user repos and starred repos  -*- lexical-binding: t; -*-

   ;; Package-Requires: ((ghub "0") (dash "0") (helm "0")

   (require 'ghub)
   (require 'dash)
   (require 'helm)

   ;;; Internal Helpers

   (defvar chunyang-github-repos nil)
   (defvar chunyang-github-stars nil)

   (defun chunyang-github-get-repos ()
     (unless chunyang-github-repos
       (setq chunyang-github-repos
             (--keep (cdr (assq 'full_name it))
                     (let ((ghub-unpaginate t))
                       (ghub-get "/user/repos")))))
     chunyang-github-repos)

   (defun chunyang-github-get-stars ()
     (unless chunyang-github-stars
       (setq chunyang-github-stars
             (--keep (cdr (assq 'full_name it))
                     (let ((ghub-unpaginate t))
                       (ghub-get "/user/starred")))))
     chunyang-github-stars)

   ;;; User Commands

   (defun chunyang-github-stars/repos-browse-url ()
     (interactive)
     (let ((repo (completing-read "GitHub Stars or Repos: "
                                  (append (chunyang-github-get-repos)
                                          (chunyang-github-get-stars))
                                  nil t)))
       (browse-url (concat "https://github.com/" repo))))

   (defun chunyang-github-stars/repos-copy-clone-url ()
     (interactive)
     (let* ((repo (completing-read "GitHub Stars or Repos: "
                                   (append (chunyang-github-get-repos)
                                           (chunyang-github-get-stars))
                                   nil t))
            (clone-url (concat "git@github.com:" repo ".git")))
       (kill-new clone-url)
       (message "Killed: %s" clone-url)))

   (defvar helm-chunyang-github-actions
     '(("Browse URL"         . (lambda (repo)
                                 (browse-url (concat "https://github.com/" repo))))
       ("Copy git-clone URL" . (lambda (repo)
                                 (let ((url (concat "git@github.com:" repo ".git")))
                                   (kill-new url)
                                   (message "Killed: %s" url))))))

   (defun helm-chunyang-github-stars ()
     (interactive)
     (helm :sources (helm-build-sync-source "GitHub Stars"
                      :candidates 'chunyang-github-get-stars
                      :action 'helm-chunyang-github-actions)
           :buffer "*helm GitHub Stars*"))

   (defun helm-chunyang-github-repos ()
     (interactive)
     (helm :sources (helm-build-sync-source "GitHub Repos"
                      :candidates 'chunyang-github-get-repos
                      :action 'helm-chunyang-github-actions)
           :buffer "*helm GitHub Repos*"))

   (provide 'chunyang-github)
   ;;; chunyang-github.el ends here
   #+END_SRC

** 用 =use-package= 完成配置

   #+BEGIN_SRC elisp
   (use-package chunyang-github
     :ensure ghub                          ; Dependency
     :commands (chunyang-github-stars/repos-browse-url
                chunyang-github-stars/repos-copy-clone-url))
   #+END_SRC

* <2016-12-16 Fri> 自动查询光标下的单词

  实现一个 Minor Mode，当我把光标停留在一个单词上一段时间，自动显示其释义。

  #+BEGIN_SRC elisp :tangle lisp/echo.el
  ;;; echo.el --- Echo something about thing at point

  ;;;###autoload
  (define-minor-mode echo-mode
    "Echo something about thing at point like eldoc."
    nil " Echo" nil
    (if echo-mode
        (add-hook 'post-command-hook 'echo-schedule-timer nil t)
      (remove-hook 'post-command-hook 'echo-schedule-timer t)))

  (defvar echo-timer nil)
  (defvar echo-idle-delay 0.50)
  (defvar echo-function #'bing-message-current-word)

  (defun bing-message-current-word ()
    (when-let ((word (current-word nil t)))
      ;; (message "-> %s" word)
      (bing-dict-brief word)))

  (defun echo-schedule-timer ()
    (unless (and echo-timer
                 (memq eldoc-timer timer-idle-list)) ;FIXME: Why?
      (setq echo-timer
            (run-with-idle-timer
             echo-idle-delay nil
             (lambda ()
               (when echo-mode
                 (echo-message)))))))

  (defun echo-message-p ()
    (require 'eldoc)
    (and (eldoc-display-message-no-interference-p)
         (not this-command)))

  (defun echo-message ()
    (with-demoted-errors "echo error: %s"
      (when (echo-message-p)
        (funcall echo-function))))

  (provide 'echo)
  ;;; echo.el ends here
  #+END_SRC

  比我的预料要好很多，居然似乎能正常使用。还可以改进的地方：
  1. Cache 查询结果
  2. 减少查询
     - 太短了不查
     - 黑名单内的不查
* [2016-12-25 Sun] 用 Org 表格表示乘法表

  =@#= 表示行号， =$#= 表示列号， =@2$2..@4$4= 表示 9 个区域。

  #+BEGIN_SRC org
  |   | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
  |---+---+---+---+---+---+---+---+---+---|
  | 1 |   |   |   |   |   |   |   |   |   |
  | 2 |   |   |   |   |   |   |   |   |   |
  | 3 |   |   |   |   |   |   |   |   |   |
  | 4 |   |   |   |   |   |   |   |   |   |
  | 5 |   |   |   |   |   |   |   |   |   |
  | 6 |   |   |   |   |   |   |   |   |   |
  | 7 |   |   |   |   |   |   |   |   |   |
  | 8 |   |   |   |   |   |   |   |   |   |
  | 9 |   |   |   |   |   |   |   |   |   |
  #+TBLFM: @2$2..@10$10=($#-1)*(@#-1)
  #+END_SRC

  完整的九九乘法表
  #+TBLNAME: 乘法表
  |   | 1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 |
  |---+---+----+----+----+----+----+----+----+----|
  | 1 | 1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 |
  | 2 | 2 |  4 |  6 |  8 | 10 | 12 | 14 | 16 | 18 |
  | 3 | 3 |  6 |  9 | 12 | 15 | 18 | 21 | 24 | 27 |
  | 4 | 4 |  8 | 12 | 16 | 20 | 24 | 28 | 32 | 36 |
  | 5 | 5 | 10 | 15 | 20 | 25 | 30 | 35 | 40 | 45 |
  | 6 | 6 | 12 | 18 | 24 | 30 | 36 | 42 | 48 | 54 |
  | 7 | 7 | 14 | 21 | 28 | 35 | 42 | 49 | 56 | 63 |
  | 8 | 8 | 16 | 24 | 32 | 40 | 48 | 56 | 64 | 72 |
  | 9 | 9 | 18 | 27 | 36 | 45 | 54 | 63 | 72 | 81 |
  #+TBLFM: @2$2..@10$10=($#-1)*(@#-1)

  公式中可以包含判断：

  #+BEGIN_QUOTE
  ‘if(@# % 2, $#, string(""))’
     Insert column number on odd rows, set field to empty on even rows.
  #+END_QUOTE

  因此第二个乘数大于第一个乘数时留空：

  #+BEGIN_SRC undefined
  if(@# >= $#, ($#-1)*(@#-1), string(""))
  #+END_SRC

  计算一半的九九乘法表
  #+TBLNAME: 乘法表 2
  |   | 1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 |
  |---+---+----+----+----+----+----+----+----+----|
  | 1 | 1 |    |    |    |    |    |    |    |    |
  | 2 | 2 |  4 |    |    |    |    |    |    |    |
  | 3 | 3 |  6 |  9 |    |    |    |    |    |    |
  | 4 | 4 |  8 | 12 | 16 |    |    |    |    |    |
  | 5 | 5 | 10 | 15 | 20 | 25 |    |    |    |    |
  | 6 | 6 | 12 | 18 | 24 | 30 | 36 |    |    |    |
  | 7 | 7 | 14 | 21 | 28 | 35 | 42 | 49 |    |    |
  | 8 | 8 | 16 | 24 | 32 | 40 | 48 | 56 | 64 |    |
  | 9 | 9 | 18 | 27 | 36 | 45 | 54 | 63 | 72 | 81 |
  #+TBLFM: @2$2..@10$10=if(@# >= $#, ($#-1)*(@#-1), string(""))

